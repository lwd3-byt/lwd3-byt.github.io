<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>matplotlib的常用样例</title>
    <link href="/2022/04/25/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%B7%E4%BE%8B/"/>
    <url>/2022/04/25/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%B7%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="matplotlib的常用样例"><a href="#matplotlib的常用样例" class="headerlink" title="matplotlib的常用样例"></a>matplotlib的常用样例</h2><p>一般matplotlib我选择配合jupyter食用</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>%matplotlib inline <br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">acc = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.3</span>]<br>epochs = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>loss = [<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.6</span>]<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fig, ax = plt.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">5</span>))<br>plt.subplots_adjust(left=<span class="hljs-literal">None</span>, bottom=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span>, top=<span class="hljs-literal">None</span>, wspace=<span class="hljs-literal">None</span>, hspace=<span class="hljs-literal">None</span>)<br><br>max_index = np.argmax(acc)<br>ax.plot(epochs, acc, <span class="hljs-string">&#x27;r&#x27;</span>)<br>ax.plot(max_index, acc[max_index], <span class="hljs-string">&#x27;*&#x27;</span>, markersize=<span class="hljs-number">15</span>)<br><br>show_text = <span class="hljs-string">&#x27;[epoch=&#123;&#125;, acc=&#123;&#125;]&#x27;</span>.<span class="hljs-built_in">format</span>(max_index, <span class="hljs-built_in">round</span>(acc[max_index],<span class="hljs-number">7</span>))<br>arrowproperty = <span class="hljs-built_in">dict</span>(facecolor=<span class="hljs-string">&#x27;yellow&#x27;</span>, width=<span class="hljs-number">0.5</span>)<br>ax.annotate(show_text, fontsize=<span class="hljs-number">15</span>, xy=(max_index, acc[max_index]), xytext=(max_index, acc[max_index]-<span class="hljs-number">0.5</span>), arrowprops=arrowproperty)<br><br>ax.plot(epochs, loss, <span class="hljs-string">&#x27;b&#x27;</span>)<br><br>ax.legend([<span class="hljs-string">&#x27;acc&#x27;</span>, <span class="hljs-string">&#x27;max_acc&#x27;</span>, <span class="hljs-string">&#x27;loss&#x27;</span>], loc=<span class="hljs-string">&#x27;lower right&#x27;</span>, prop=&#123;<span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">13</span>&#125;)<br>ax.grid()<br>ax.set_xlabel(<span class="hljs-string">&#x27;epoch&#x27;</span>, fontsize=<span class="hljs-number">20</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;acc loss &#x27;</span>, fontsize=<span class="hljs-number">20</span>)<br>ax.set_title(<span class="hljs-string">&#x27;epoch vs acc&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">25</span>, color=<span class="hljs-string">&#x27;black&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="/2022/04/25/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%B7%E4%BE%8B/output_2_1.png" alt="png"></p><hr><p>画子图的一种方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">plt.style.use(<span class="hljs-string">&#x27;seaborn-ticks&#x27;</span>) <span class="hljs-comment"># 风格</span><br>fig, axes = plt.subplots(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)) <span class="hljs-comment"># 2行3列的子图布局，大小为10x10</span><br><br><span class="hljs-comment"># 子图之间的间隔</span><br>plt.subplots_adjust(left=<span class="hljs-literal">None</span>, bottom=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span>, top=<span class="hljs-literal">None</span>, wspace=<span class="hljs-literal">None</span>, hspace=<span class="hljs-literal">None</span>)<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>img_1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;用户头像4.png&#x27;</span>).resize((<span class="hljs-number">200</span>, <span class="hljs-number">200</span>))<br>img_2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;用户头像5.png&#x27;</span>).resize((<span class="hljs-number">200</span>, <span class="hljs-number">200</span>))<br>img_3 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;用户头像6.png&#x27;</span>).resize((<span class="hljs-number">200</span>, <span class="hljs-number">200</span>))<br>img_4 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;用户头像7.png&#x27;</span>).resize((<span class="hljs-number">200</span>, <span class="hljs-number">200</span>))<br><br><span class="hljs-comment"># 样例(图片的引用)</span><br>axes[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>].imshow(img_1)<br>axes[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>].set_title(<span class="hljs-string">&#x27;玉子&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">20</span>, color=<span class="hljs-string">&#x27;lightgreen&#x27;</span>)<br><br>axes[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>].imshow(img_2)<br>axes[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>].set_title(<span class="hljs-string">&#x27;薇尔莉特&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">20</span>, color=<span class="hljs-string">&#x27;lightgreen&#x27;</span>)<br><br>axes[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>].imshow(img_3)<br>axes[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>].set_title(<span class="hljs-string">&#x27;牧野神奈&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">20</span>, color=<span class="hljs-string">&#x27;orange&#x27;</span>)<br><br>axes[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>].imshow(img_4)<br>axes[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>].set_title(<span class="hljs-string">&#x27;还是玉子&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">20</span>, color=<span class="hljs-string">&#x27;orange&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="/2022/04/25/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%B7%E4%BE%8B/output_3_1.png" alt="png"></p><hr><p>画子图的另一种方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>plt.subplots_adjust(left=<span class="hljs-literal">None</span>, bottom=<span class="hljs-literal">None</span>, right=<span class="hljs-literal">None</span>, top=<span class="hljs-literal">None</span>, wspace=<span class="hljs-literal">None</span>, hspace=<span class="hljs-literal">None</span>)<br><br>all_x = []<br>all_y = []<br><br>all_x.append([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>])<br>all_y.append([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>])<br><br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0.1</span>) <span class="hljs-comment"># 等差数列，(0,6)范围每隔0.1取一个值</span><br>all_x.append(x)<br>all_y.append(np.sin(x))<br><br>all_x.append(x)<br>all_y.append(np.cos(x))<br><br>all_x.append(x)<br>all_y.append(x**<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    ax = plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, i+<span class="hljs-number">1</span>)<br>    plt.scatter(all_x[i], all_y[i])<br></code></pre></div></td></tr></table></figure><p><img src="/2022/04/25/matplotlib%E7%9A%84%E5%B8%B8%E7%94%A8%E6%A0%B7%E4%BE%8B/output_4_0.png" alt="png"></p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo d的一些设置</title>
    <link href="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hexo-d上传到github仓库的一些设置"><a href="#hexo-d上传到github仓库的一些设置" class="headerlink" title="hexo d上传到github仓库的一些设置"></a>hexo d上传到github仓库的一些设置</h2><p>不记得什么时候github更改了上传信息，我不能通过我的github昵称和密码来上传和更新我的博客，所以在此记录一下解决方法</p><p>现在github采用“<code>用户名+token认证</code>”的方式来验证用户，所以我们需要先在我们的github主页上，生成一个token</p><p><strong>按以下步骤执行就行</strong></p><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/1.png" style="zoom: 67%;"><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/2.png" style="zoom: 67%;"><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/3.png" style="zoom: 67%;"><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/4.png" style="zoom: 67%;"><p>上面这张图，建议勾选所有，因为我也不确定这条token需要多少权限(苦笑)</p><p>然后生成token就行</p><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/5.png" style="zoom: 67%;"><p><strong>生成token，一定要将token复制到本地！！！</strong></p><p><strong>生成token，一定要将token复制到本地！！！！</strong></p><p><strong>生成token，一定要将token复制到本地！！！！</strong></p><p>不然页面刷新就复制不了了</p><p>现在只要记住这个token就行，每次<code>hexo d</code>上传的时候输一下用户名和这个token就行</p><p>但是</p><p>这样每次都比较麻烦，还要记住token。所以，我们设置一下，当<code>hexo d</code>时，携带用户名和token，就可以跳过手动输入，接下来是详细设置</p><p>进入hexo文件目录下，并用记事本或者vscode对红框中的内容进行修改</p><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/6.png" style="zoom: 67%;"><p>找到下图的这段代码</p><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/7.png" style="zoom: 67%;"><p>将下图红框中的内容进行修改为：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">https://&#123;github昵称&#125;:&#123;token&#125;@github.com/lwd3-byt/lwd3-byt.github.io.git<br></code></pre></div></td></tr></table></figure><img src="/2022/03/21/hexo-d%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/8.png" style="zoom: 67%;"><p>之后使用<code>hexo d</code>时，就会舒服很多</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装pyenv以及多个虚拟环境</title>
    <link href="/2022/03/16/ubuntu%E5%AE%89%E8%A3%85pyenv%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/03/16/ubuntu%E5%AE%89%E8%A3%85pyenv%E4%BB%A5%E5%8F%8A%E5%A4%9A%E4%B8%AA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一个简单的安装记录"><a href="#一个简单的安装记录" class="headerlink" title="一个简单的安装记录"></a><strong>一个简单的安装记录</strong></h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><h5 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a><strong>更新软件包</strong></h5><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xaml">git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;pyenv&#x2F;pyenv.git ~&#x2F;.pyenv<br></code></pre></div></td></tr></table></figure><h5 id="安装常用软件包"><a href="#安装常用软件包" class="headerlink" title="安装常用软件包"></a><strong>安装常用软件包</strong></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">git clone --depth 1 https://github.com/pyenv/pyenv.git ~/.pyenv<br></code></pre></div></td></tr></table></figure><h5 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a><strong>安装依赖包</strong></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">sudo apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev<br></code></pre></div></td></tr></table></figure><h5 id="克隆pyenv到本地"><a href="#克隆pyenv到本地" class="headerlink" title="克隆pyenv到本地"></a><strong>克隆pyenv到本地</strong></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">git clone --depth 1 https://github.com/pyenv/pyenv.git ~/.pyenv<br></code></pre></div></td></tr></table></figure><h5 id="克隆pyenv所使用的virtualenv插件"><a href="#克隆pyenv所使用的virtualenv插件" class="headerlink" title="克隆pyenv所使用的virtualenv插件"></a><strong>克隆pyenv所使用的<code>virtualenv</code>插件</strong></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv<br><br></code></pre></div></td></tr></table></figure><h4 id="配置pyenv到环境变量"><a href="#配置pyenv到环境变量" class="headerlink" title="配置pyenv到环境变量"></a><strong>配置pyenv到环境变量</strong></h4><blockquote><ol><li><p>在终端打开.bashrc文件   vi ~/.bashrc</p></li><li><p>进入bashrc后，按O键，粘贴每一行代码，粘贴完后，按<code>esc</code>退出，并按<code>:</code>，输入<code>wq</code>之后回车保存退出</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PYENV_ROOT</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.pyenv&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PYENV_ROOT</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>eval <span class="hljs-string">&quot;<span class="hljs-variable">$(pyenv init --path)</span>&quot;</span><br>eval <span class="hljs-string">&quot;<span class="hljs-variable">$(pyenv virtualenv-init -)</span>&quot;</span><br>eval <span class="hljs-string">&quot;<span class="hljs-variable">$(pyenv init -)</span>&quot;</span><br></code></pre></div></td></tr></table></figure></li><li><p>在终端输入 source ~/.bashrc，进行保存</p></li></ol></blockquote><h4 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a><strong>安装虚拟环境</strong></h4><p>在终端中，使用<code>pyenv install --list</code> 可以列出所有可安装版本</p><blockquote><ol><li>先    <code>pyenv install 3.7.10</code>    <strong>#该命令用来安装python版本</strong></li><li>然后再       <code>pyenv virtualenv 3.7.10 yolox</code>   <strong>#该命令用来安装虚拟环境</strong></li><li><strong>说明：</strong><code>yolox</code>是虚拟环境的名称, <code>3.7.10</code>是 <code>python</code> 的版本号</li></ol></blockquote><h4 id="虚拟环境的使用"><a href="#虚拟环境的使用" class="headerlink" title="虚拟环境的使用"></a><strong>虚拟环境的使用</strong></h4><p>我们在终端任意位置，通过以下命令来进入虚拟环境并pip install我们需要的东西</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">pyenv activate yolox   # 切换到新的虚拟环境<br>pip install ...<br>pyenv deactivate    # 退出当前虚拟环境<br>pyenv virtualenv-delete yolox     # 删除虚拟环境<br></code></pre></div></td></tr></table></figure><p>我们还可以设置，当我们进入某个文件夹内，将自动启用该文件夹所使用的虚拟环境</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"># 先进入该文件夹，在该文件夹内打开终端<br>pyenv local yolox  # 在该文件夹内使用yolox虚拟环境<br>pyenv local --unset  # 取消该文件夹内所使用的虚拟环境<br></code></pre></div></td></tr></table></figure><p>我们还可以设置更改全局环境中的python版本</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"># 打开终端(桌面下或者文件夹内均可)<br>pyenv global yolox # 在全局环境内均使用yolox虚拟环境<br>pyenv global system # 退出虚拟环境，使用linux系统自带的python环境<br></code></pre></div></td></tr></table></figure><p>还可以通过<code>pyenv versions</code>查看已有的虚拟环境(带*的为当前使用的虚拟环境)</p><h4 id="这里顺便记录一下常用的vi命令"><a href="#这里顺便记录一下常用的vi命令" class="headerlink" title="这里顺便记录一下常用的vi命令"></a><strong>这里顺便记录一下常用的vi命令</strong></h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">esc退出查看/进入编辑模式<br>i当前行插入<br>dd删除当前行<br>o在当前行的上一行插入<br>x删除单个字符<br></code></pre></div></td></tr></table></figure><p>顺便说一下vscode选用python虚拟环境版本</p><blockquote><ol><li>vscode市场库下载python</li><li>ctrl+shift+p调出命令行</li><li>然后输入python select interpreter，然后选择自己想要的python解释器即可</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XgBoost使用</title>
    <link href="/2021/12/09/XgBoost%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/09/XgBoost%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="XgBoost模型使用"><a href="#XgBoost模型使用" class="headerlink" title="XgBoost模型使用"></a>XgBoost模型使用</h2><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><blockquote><p>本文章记录一下内容：参加一个大数据比赛，运用到该模型中的XGBRegressor回归模型</p><p>以及对数据的处理(pandas使用)，同时还有一些迁移学习的思想及运用。</p><p>完整代码及题目数据已上传到百度网盘，下面对当时设计的方案作一个回想(运用到迁移学习的思想)</p></blockquote><h2 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h2><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><blockquote><p>A数据多，B数据少</p><p>方法：通过探索二者关系，将A数据集中的信息迁移到B数据集中</p><p>目标：获得B数据预测模型</p></blockquote><hr><h4 id="模型A"><a href="#模型A" class="headerlink" title="模型A"></a>模型A</h4><blockquote><p>①对B数据进行特征工程，得到特征集合，并将其划分为训练集和数据集</p><blockquote><p><code>b_train_t.to_csv(&#39;B_train_dummy.csv&#39;, index=False)</code></p><p><code>b_test_t.to_csv(&#39;B_train_dummy.csv&#39;, index = False)</code></p></blockquote><p>②采用XGBoost训练B数据，获得单模型A</p><p>③模型集成</p><blockquote><p>通过修改<em>params</em>不同的参数：例如max_depth，eta等</p><p>获得多模型集成得到的多模型A</p><p>多模型A对B数据预测，得到平均结果 -&gt; <code>model_A_pred.csv</code></p></blockquote></blockquote><hr><h4 id="模型B"><a href="#模型B" class="headerlink" title="模型B"></a>模型B</h4><blockquote><p>①对A数据进行特征工程，得到特征集合，A数据全部作为训练集</p><p>②采用XGBoost训练A数据，并将<strong>B数据作为验证集</strong>来进行调参</p><p>③通过①②获得单模型B</p></blockquote><hr><h4 id="模型C"><a href="#模型C" class="headerlink" title="模型C"></a>模型C</h4><blockquote><p>①只选取B数据，将其划分为训练集和验证集</p><p>②在模型B的基础上，利用B数据微调模型B，获得单模型C</p><p>③模型集成</p><blockquote><p>获得多模型C</p><p>多模型C对B数据预测，得到平均结果 -&gt; <code>model_C_pred.csv</code></p></blockquote></blockquote><hr><h4 id="目标结果"><a href="#目标结果" class="headerlink" title="目标结果"></a>目标结果</h4><p>①给 <code>model_A_pred.csv</code> 和 <code>model_C_pred.csv</code> 赋予不同的权重</p><p>②由于多模型A由目标B数据集直接获得，与测试数据相关性大，则权重较大</p><p>③多模型C参杂源A数据集，则权重交小</p><p>④<code>Final_Pred</code> = 0.85 * <code>model_A_pred.csv</code> + 0.15 * <code>model_C_pred.csv</code></p><hr><h4 id="代码及题目数据打包"><a href="#代码及题目数据打包" class="headerlink" title="代码及题目数据打包"></a>代码及题目数据打包</h4><p>链接：<a href="https://pan.baidu.com/s/1crRWogK_XBpDtXjafveBsA">https://pan.baidu.com/s/1crRWogK_XBpDtXjafveBsA</a><br>提取码：axlg</p>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XgBoost</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装pytorch-gpu版本</title>
    <link href="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/"/>
    <url>/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装pytorch1-7-1-GPU版本"><a href="#安装pytorch1-7-1-GPU版本" class="headerlink" title="安装pytorch1.7.1(GPU版本)"></a>安装pytorch1.7.1(GPU版本)</h2><p>conda换清华源</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">conda</span> <span class="hljs-string">config</span> <span class="hljs-string">--remove-key</span> <span class="hljs-string">channels</span><br><span class="hljs-string">conda</span> <span class="hljs-string">config</span> <span class="hljs-string">--add</span> <span class="hljs-string">channels</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64</span><br><span class="hljs-string">conda</span> <span class="hljs-string">config</span> <span class="hljs-string">--add</span> <span class="hljs-string">channels</span> <span class="hljs-string">http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64</span><br><span class="hljs-string">conda</span> <span class="hljs-string">config</span> <span class="hljs-string">--set</span> <span class="hljs-string">show_channel_urls</span> <span class="hljs-literal">yes</span><br></code></pre></div></td></tr></table></figure><p>conda创建一个python=3.7的虚拟环境，并激活</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">conda</span> <span class="hljs-string">create</span> <span class="hljs-string">-n</span> <span class="hljs-string">test</span> <span class="hljs-string">python=3.7</span><br><span class="hljs-string">activate</span> <span class="hljs-string">test</span><br></code></pre></div></td></tr></table></figure><p>进入该网址下载离线版本的pytorch(gpu)       <a href="https://download.pytorch.org/whl/torch_stable.html">https://download.pytorch.org/whl/torch_stable.html</a></p><p>还有torchversion</p><p>(cu102指的是cuda的版本为10.2的，百度查询自己的cuda版本，然后下载对应版本即可，如果没有对应版本，下载比自己cuda版本稍低一点的即可)</p><p><img src="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/2.png"></p><p><img src="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/1.png"></p><p>在激活的test虚拟环境中完成下面的操作             <img src="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/3.png"></p><p>输入命令：pip install (whl文件保存路径)\文件名称</p><p>我刚才下载的两个文件放到了桌面上，所以我的命令如下(改为自己的存储路径即可)</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">C:\Users\lwd\Desktop\torch-1.7.1-cp37-cp37m-win_amd64.whl</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">C:\Users\lwd\Desktop\torchvision-0.8.2-cp37-cp37m-win_amd64.whl</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/4.png"><img src="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/5.png"></p><p>安装完毕后</p><p>输入以下命令检查是否安装正确，如图所示打印为True说明安装正确！</p><p><img src="/2021/10/11/%E5%AE%89%E8%A3%85pytorch-gpu%E7%89%88%E6%9C%AC/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java后端开发教程</title>
    <link href="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
    <url>/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>emmm一个非常不正经的教程，暂时只是记录开发的步骤，具体原理需要留到下次。</p><h3 id="资源："><a href="#资源：" class="headerlink" title="资源："></a>资源：</h3><blockquote><p><strong>前后端所有的资源</strong></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1_NRE678mgRl7p6UNd_6Xvg">https://pan.baidu.com/s/1_NRE678mgRl7p6UNd_6Xvg</a><br>提取码：1g8k</p></blockquote><p><strong>后端：</strong></p><blockquote><p><strong>Maven开源项目框架</strong></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1-8cRTpmVQHLirZwuNG9L6Q">https://pan.baidu.com/s/1-8cRTpmVQHLirZwuNG9L6Q</a><br>提取码：se9k</p></blockquote><p><strong>idea编译器及破解工具</strong></p><blockquote><p>注意：该破解工具只对我提供的idea版本有效</p><p>链接：<a href="https://pan.baidu.com/s/1HbdKnCkZgKYOlB5uZerFyA">https://pan.baidu.com/s/1HbdKnCkZgKYOlB5uZerFyA</a><br>提取码：6u5s</p></blockquote><p><strong>Navicat Premium 15</strong></p><blockquote><p>软件安装包及破解工具</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1bwOGRVOyt8K5tlwyPZh1tA">https://pan.baidu.com/s/1bwOGRVOyt8K5tlwyPZh1tA</a><br>提取码：bsky</p></blockquote><p>对应的破解教程</p><blockquote><p><a href="https://www.bilibili.com/video/BV17Q4y1T7YV">Navicat_Premium_v15 激活_哔哩哔哩_bilibili</a></p></blockquote></blockquote></blockquote></blockquote><p>默认大家已配置好jdk8(jdk1.8)，并将其添加到了PATH中。</p><ul><li>在idea选择Settings</li></ul><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/2.png" style="zoom: 67%;"><ul><li><p>按照截图所示内容，将刚在下载好的Maven项目框架的文件路径，配置到idea中</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/3.png" style="zoom: 50%;"></li><li><p>新建一个project</p></li></ul><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/1.png" style="zoom: 67%;"><ul><li>按照下图所示内容即可</li></ul><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/4.png" style="zoom: 67%;"><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/5.png" style="zoom: 67%;"><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/6.png" style="zoom: 67%;"><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/7.png" style="zoom: 67%;"><ul><li>Finish之后，需要等待一段时间来完成下载配置</li></ul><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/8.png" style="zoom: 67%;"><p>完成上述操作之后，我们就创建好了一个基本的后台项目。</p><hr><h3 id="接下来完成数据库以及一个用户注册业务"><a href="#接下来完成数据库以及一个用户注册业务" class="headerlink" title="接下来完成数据库以及一个用户注册业务"></a>接下来完成数据库以及一个用户注册业务</h3><h4 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h4><p><strong>在Navicat中</strong>，新建一个MySQL连接</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/10.png" style="zoom: 67%;"><p>在example连接中新建一个数据库demo</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/9.png" style="zoom: 67%;"><p>在demo数据库中，新建一个user表</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/11.png" style="zoom: 67%;"><hr><h4 id="IDEA部分"><a href="#IDEA部分" class="headerlink" title="IDEA部分"></a>IDEA部分</h4><h5 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h5><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/12.png" style="zoom: 67%;"><p>并按照下面的截图新建好package和directory以及yml</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/13.png" style="zoom: 67%;"><hr><h6 id="pojo包下的User类"><a href="#pojo包下的User类" class="headerlink" title="pojo包下的User类"></a>pojo包下的User类</h6><p>在pojo包中新建一个User类，并完成一些所需的数据库映射对象所需的代码配置</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/14.png" style="zoom: 67%;"><p>接着空一行，按下ALT+INS，选择Constructor</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/15.png" style="zoom: 67%;"><p>之间选择Select None 构造一个无参的方法</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/16.png" style="zoom: 67%;"><p>考虑到用户注册时需要email，password和nickname</p><p>我们按照同样的方法，构建一个只含email，password和nickname的方法</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/17.png" style="zoom: 67%;"><p>同样的，用户登录时需要email和password，那么我们构建一个只含email和password的方法</p><p>最后，我们还需要构建一个含全参的方法</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/18.png" style="zoom: 67%;"><p>仍然是快捷建ALT+INS，这次我们选择Getter and Setter</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/19.png" style="zoom: 67%;"><p>全选</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/20.png" style="zoom: 67%;"><p>最后我们同样快捷建ALT+INS，选择toString(),</p><p>全选并点击ok即可完成pojo中User类的一个简单的配置</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/21.png" style="zoom: 67%;"><p>pojo下User类的全部代码如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.pojo;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.type.Alias;<br><br><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-comment">//起别名，在写sql代码时，如果传入的参数(parameterType)为User类，</span><br><span class="hljs-comment">//就不用写com.example.demo.pojo.User</span><br><span class="hljs-comment">//只需要写user就行</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//用户编号</span><br>    <span class="hljs-keyword">private</span> String email; <span class="hljs-comment">//用户邮箱</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//用户密码</span><br>    <span class="hljs-keyword">private</span> String nickname; <span class="hljs-comment">//用户昵称</span><br><br>    <span class="hljs-comment">//无参</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">//用户注册--需要邮箱，密码，昵称</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String email, String password, String nickname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>        <span class="hljs-keyword">this</span>.password = password;<br>        <span class="hljs-keyword">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-comment">//用户登录--需要邮箱，密码</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String email, String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-comment">//全参</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer id, String email, String password, String nickname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.email = email;<br>        <span class="hljs-keyword">this</span>.password = password;<br>        <span class="hljs-keyword">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span><span class="hljs-params">(String password)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNickname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNickname</span><span class="hljs-params">(String nickname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><hr><h6 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h6><p>进行数据库与idea的连接，以及配置mybatis(<em>MyBatis</em> 是一款优秀的持久层框架,它支持自定义 SQL、存储过程以及高级映射。)</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/22.png" style="zoom: 67%;"><p>application.yml代码如下</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"># 配置java与数据库的连接<br>spring:<br>  datasource:<br>    username: root<br>    password: 123456<br>    url: jdbc:mysql://localhost:3306/demo # 这里我连的是数据库demo，只要将demo改为自己的数据库名字即可<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>server:<br>  port: 18081 # 端口号 ，可以自己设置一个，如果运行是发现端口号冲突，重新换一个就行<br><br># 配置sql代码<br>mybatis:<br>  type-aliases-package: com.example.demo.pojo # pojo的路径<br>  mapper-locations: classpath:mapper/*Mapper.xml # mapper文件地址<br>  configuration:<br>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # SQL语句输出日志<br><br></code></pre></div></td></tr></table></figure><hr><h6 id="config包下WebMvcConfig类"><a href="#config包下WebMvcConfig类" class="headerlink" title="config包下WebMvcConfig类"></a>config包下WebMvcConfig类</h6><p>在config包下新建一个WebMvcConfig类，并写入以下代码来设置跨域，以便前后端在url上的统一</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/23.png" style="zoom: 67%;"><p>WebMvcConfig类代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 设置允许跨域的路径</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 允许跨域请求的域名</span><br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">//允许证书</span><br>                .allowCredentials(<span class="hljs-keyword">true</span>)<br>                <span class="hljs-comment">// 允许的方法</span><br>                .allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>                <span class="hljs-comment">// 跨域的时间</span><br>                .maxAge(<span class="hljs-number">3600</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h6 id="util包下ResponseData类"><a href="#util包下ResponseData类" class="headerlink" title="util包下ResponseData类"></a>util包下ResponseData类</h6><p>在util包下新建一个ResponseData类，在后端连接前端时，发出一些成功或者错误的响应</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/24.png" style="zoom: 67%;"><p>ResponseData类代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.util;<br><span class="hljs-comment">//自定义响应数据</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseData</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> success; <span class="hljs-comment">//是否成功</span><br>    <span class="hljs-keyword">private</span> Integer code; <span class="hljs-comment">//响应代码</span><br>    <span class="hljs-keyword">private</span> String message; <span class="hljs-comment">//响应提示语句</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResponseData</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResponseData</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> success, Integer code, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.success = success;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResponseData</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> success, Integer code, String message, T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.success = success;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSuccess</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> success;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSuccess</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> success)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.success = success;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCode</span><span class="hljs-params">(Integer code)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ResponseData&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;success=&quot;</span> + success +<br>                <span class="hljs-string">&quot;, code=&quot;</span> + code +<br>                <span class="hljs-string">&quot;, message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, data=&quot;</span> + data +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h6 id="dao包下IUserDao接口"><a href="#dao包下IUserDao接口" class="headerlink" title="dao包下IUserDao接口"></a>dao包下IUserDao接口</h6><p>在dao包下新建一个IUserDao接口，该接口直接与SQL语句代码块相连，里面的代码用来调用不同的SQL语句</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/25.png" style="zoom: 67%;"><p>IUserDao接口代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.dao;<br><br><span class="hljs-keyword">import</span> com.example.demo.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-comment">// 关于用户表的数据库接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增一个用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 传入的是用户的邮箱，密码，昵称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 【0：注册失败 1：注册成功】</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addOneUser</span><span class="hljs-params">(User user)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h6 id="mapper文件夹下UserMapper-xml"><a href="#mapper文件夹下UserMapper-xml" class="headerlink" title="mapper文件夹下UserMapper.xml"></a>mapper文件夹下UserMapper.xml</h6><p>在mapper文件夹下，新建一个UserMapper.xml用来写SQL语句</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/26.png" style="zoom: 67%;"><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/27.png" style="zoom: 67%;"><p>UserMapper.xml代码如下</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.demo.dao.IUserDao&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--新增一个用户--&gt;</span><br>    <span class="hljs-comment">&lt;!--这里id=&quot;addOneUser&quot;对应着IUserDao接口中的方法addOneUser--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addOneUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        INSERT INTO `user`(`email`,`password`,`nickname`)<br>        VALUES (#&#123;email&#125;,#&#123;password&#125;,#&#123;nickname&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h6 id="service包下IUserService接口"><a href="#service包下IUserService接口" class="headerlink" title="service包下IUserService接口"></a>service包下IUserService接口</h6><p>在service包中新建一个IUserService接口</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/28.png" style="zoom: 67%;"><p>IUserService接口代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> com.example.demo.pojo.User;<br><br><span class="hljs-comment">// 关于用户的业务接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户的注册业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 注册的信息【email,password,nickname】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否注册成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">userRegister</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h6 id="service包下impl文件夹下UserServiceImpl类"><a href="#service包下impl文件夹下UserServiceImpl类" class="headerlink" title="service包下impl文件夹下UserServiceImpl类"></a>service包下impl文件夹下UserServiceImpl类</h6><p>在service包中新建一个impl文件夹，再在该文件夹下创建一个UserServiceImpl类</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/29.png" style="zoom: 67%;"><p>UserServiceImpl类代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service.impl;<br><br><span class="hljs-keyword">import</span> com.example.demo.dao.IUserDao;<br><span class="hljs-keyword">import</span> com.example.demo.pojo.User;<br><span class="hljs-keyword">import</span> com.example.demo.service.IUserService;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.resolver.readers.ExtendedXMLCatalogReader;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-comment">// 关于用户的业务实现层</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserDao userDao; <span class="hljs-comment">// 关于用户的数据库接口</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户的注册业务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user 注册的信息【email,password,nickname】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否注册成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span> <span class="hljs-comment">//事务回滚</span><br>    <span class="hljs-comment">//传入的user参数是由controller层传过来的，</span><br>    <span class="hljs-comment">// 而controller层中的user又是由前端的form表单通过ajax使用url传过来的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">userRegister</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 新增一个用户</span><br>            count = userDao.addOneUser(user);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;该账户已被使用&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(count != <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;新增失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h6 id="controller包下UserControll类"><a href="#controller包下UserControll类" class="headerlink" title="controller包下UserControll类"></a>controller包下UserControll类</h6><p>在控制层controller包下创建一个UserControll类，该类直接与前端相连</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/30.png" style="zoom: 67%;"><p>UserControll类代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> com.example.demo.pojo.User;<br><span class="hljs-keyword">import</span> com.example.demo.service.IUserService;<br><span class="hljs-keyword">import</span> com.example.demo.util.ResponseData;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-comment">// 关于用户的控制层【处理web请求】</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span> <span class="hljs-comment">// 设置url中UserController用户控制层都是在/user下的</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService; <span class="hljs-comment">// 关于用户的业务</span><br><br>    <span class="hljs-comment">// 前端传参数给后端，用PostMapping</span><br>    <span class="hljs-comment">// 若前端不传参数给后端，则用GetMapping</span><br>    <br>    <span class="hljs-meta">@PostMapping(&quot;/register&quot;)</span> <span class="hljs-comment">// /user/register</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResponseData <span class="hljs-title">register</span><span class="hljs-params">(User user)</span></span>&#123;<br>        <span class="hljs-comment">// 密码加密</span><br>        user.setPassword(DigestUtils.md5DigestAsHex(user.getPassword().getBytes()));<br>        <span class="hljs-keyword">try</span> &#123;<br>            userService.userRegister(user);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData(<span class="hljs-keyword">true</span>,<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;注册成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseData(<span class="hljs-keyword">false</span>,<span class="hljs-number">1000</span>,e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>按照下图运行成功，并未暂停报错，则至少数据库是配置好了，真正测试前端操作究竟能不能通过ajax修改后端数据库，我们将留到下一篇“java的前后端连接”来测试</p><img src="/2021/08/11/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/31.png" style="zoom: 67%;">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Latex论文样式</title>
    <link href="/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/"/>
    <url>/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>贴下全部代码，凑个字数hh</p><p>全部文件在文章末尾~</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[UTF8, a4paper, zihao=-4,twoside,scheme=chinese,openany]&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>[margin=1in]&#123;geometry&#125; <span class="hljs-comment">%将margin设为来1inch(2.5cm),符合Office word中对A4纸的默认定义。</span><br><span class="hljs-keyword">\usepackage</span>&#123;fancyhdr&#125;<br><span class="hljs-keyword">\pagestyle</span>&#123;fancy&#125;<br><span class="hljs-keyword">\lfoot</span>&#123;&#125; <span class="hljs-comment">%这条语句可以让页码出现在下方</span><br><span class="hljs-keyword">\renewcommand</span>&#123;<span class="hljs-keyword">\headrulewidth</span>&#125;&#123;0pt&#125; <span class="hljs-comment">%去除页眉的横线</span><br><span class="hljs-keyword">\renewcommand</span><span class="hljs-keyword">\appendix</span>&#123;<span class="hljs-keyword">\setcounter</span>&#123;secnumdepth&#125;&#123;-2&#125;&#125; <span class="hljs-comment">% 隐藏标题前的序号，但是可以在目录中显示</span><br><br><span class="hljs-keyword">\usepackage</span>&#123;ctex&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125; <span class="hljs-comment">%引入图片</span><br><br><span class="hljs-keyword">\usepackage</span>&#123;setspace&#125; <span class="hljs-comment">%行距</span><br><span class="hljs-comment">%\singlespacing %单倍行距</span><br><span class="hljs-comment">%\onehalfspacing %1.5倍行距</span><br><span class="hljs-comment">%\doublespacing %双倍行距</span><br><span class="hljs-comment">%\setstretch&#123;1.25&#125; %任意行距</span><br><br><span class="hljs-keyword">\usepackage</span>&#123;ulem&#125; <span class="hljs-comment">%下划线</span><br><span class="hljs-keyword">\usepackage</span>&#123;indentfirst&#125; <span class="hljs-comment">%缩进</span><br><span class="hljs-keyword">\usepackage</span>&#123;titlesec&#125; <span class="hljs-comment">%目录</span><br><span class="hljs-keyword">\usepackage</span>&#123;titletoc&#125; <span class="hljs-comment">%目录</span><br><span class="hljs-keyword">\graphicspath</span>&#123;&#123;logo&#125;&#125; <span class="hljs-comment">%图片路径</span><br><br><span class="hljs-comment">%=============设置中文字体========================</span><br><span class="hljs-keyword">\usepackage</span>&#123;ctexsize,type1cm&#125;<br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\yihao</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;26pt&#125;&#123;39pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;<br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\xiaoyi</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;24pt&#125;&#123;36pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;   <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\erhao</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;22pt&#125;&#123;33pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;          <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\xiaoer</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;18pt&#125;&#123;27pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;          <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\sanhao</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;16pt&#125;&#123;24pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;        <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\xiaosan</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;15pt&#125;&#123;22.5pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;        <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\sihao</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;14pt&#125;&#123;21pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;            <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\xiaosi</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;12pt&#125;&#123;18pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;            <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\wuhao</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;10.5pt&#125;&#123;15.75pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;<br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\xiaowu</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;9pt&#125;&#123;13.5pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;    <br><span class="hljs-keyword">\newcommand</span>&#123;<span class="hljs-keyword">\liuhao</span>&#125;&#123;<span class="hljs-keyword">\fontsize</span>&#123;7.5pt&#125;&#123;11.25pt&#125;<span class="hljs-keyword">\selectfont</span>&#125;<br><span class="hljs-comment">%===================================================</span><br><br><span class="hljs-comment">%===============设置目录格式=========================</span><br><span class="hljs-keyword">\titlecontents</span>&#123;chapter&#125;[4em]&#123;<span class="hljs-keyword">\vspace</span>&#123;3mm&#125;<span class="hljs-keyword">\heiti</span>&#125;&#123;<span class="hljs-keyword">\contentslabel</span>&#123;4.0em&#125;&#125;&#123;&#125;&#123;<span class="hljs-keyword">\titlerule</span>*[0.5pc]&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\cdot</span><span class="hljs-built_in">$</span>&#125;<span class="hljs-keyword">\small</span><span class="hljs-keyword">\contentspage</span>&#125;<br><br><span class="hljs-keyword">\titlecontents</span>&#123;section&#125;[4em]&#123;<span class="hljs-keyword">\small</span>&#125;&#123;<span class="hljs-keyword">\contentslabel</span>&#123;2.5em&#125;&#125;&#123;&#125;&#123;<span class="hljs-keyword">\titlerule</span>*[0.5pc]&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\cdot</span><span class="hljs-built_in">$</span>&#125;<span class="hljs-keyword">\contentspage</span>&#125;<br><br><span class="hljs-keyword">\titlecontents</span>&#123;subsection&#125;[7.0em]&#123;<span class="hljs-keyword">\small</span>&#125;&#123;<span class="hljs-keyword">\contentslabel</span>&#123;3.3em&#125;&#125;&#123;&#125;&#123;<span class="hljs-keyword">\titlerule</span>*[.5pc]&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\cdot</span><span class="hljs-built_in">$</span>&#125;<span class="hljs-keyword">\contentspage</span>&#125;<br><br><span class="hljs-keyword">\titlecontents</span>&#123;subsubsection&#125;[10.0em]&#123;<span class="hljs-keyword">\small</span>&#125;&#123;<span class="hljs-keyword">\contentslabel</span>&#123;3.3em&#125;&#125;&#123;&#125;&#123;<span class="hljs-keyword">\titlerule</span>*[.5pc]&#123;<span class="hljs-built_in">$</span><span class="hljs-keyword">\cdot</span><span class="hljs-built_in">$</span>&#125;<span class="hljs-keyword">\contentspage</span>&#125;<br><span class="hljs-comment">%===================================================</span><br><br><span class="hljs-comment">%===============参考文献============================</span><br><span class="hljs-keyword">\bibliographystyle</span>&#123;plain&#125; <span class="hljs-comment">% 文献样式</span><br><span class="hljs-comment">%===================================================</span><br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%===================================封面===========================================================</span><br><span class="hljs-keyword">\thispagestyle</span>&#123;empty&#125; <span class="hljs-comment">%当前页不显示页码</span><br><br><span class="hljs-keyword">\begin</span>&#123;center&#125;<br><span class="hljs-keyword">\includegraphics</span>[scale=0.7]&#123;1&#125;<br><span class="hljs-keyword">\includegraphics</span>[scale=0.9]&#123;2&#125;<br><span class="hljs-keyword">\\</span>~<span class="hljs-keyword">\\</span>~<span class="hljs-keyword">\\</span> <span class="hljs-comment">%在居中里空两行</span><br><span class="hljs-comment">%空一行：\\~\\</span><br><span class="hljs-comment">%\\换行</span><br>&#123;<span class="hljs-keyword">\kaishu</span> <span class="hljs-keyword">\erhao</span> <span class="hljs-keyword">\bfseries</span> 2020-2021学年第3学期&#125;<br><span class="hljs-keyword">\\</span>~<span class="hljs-keyword">\\</span><br>&#123;<span class="hljs-keyword">\kaishu</span> <span class="hljs-keyword">\yihao</span> <span class="hljs-keyword">\bfseries</span> 《丝绸文化与东南亚发展》结课论文&#125;<br><span class="hljs-keyword">\\</span>~<span class="hljs-keyword">\\</span>~<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;center&#125;<br><br><span class="hljs-comment">%~\\ %在正文中空一行</span><br><span class="hljs-comment">% \leftskip=0pt \rightskip=0pt plus 0cm 左右对齐</span><br>&#123;<br><span class="hljs-keyword">\heiti</span> <span class="hljs-keyword">\xiaoer</span> <span class="hljs-keyword">\bfseries</span> 题目 <span class="hljs-keyword">\qquad</span> <span class="hljs-keyword">\uline</span>&#123;&#123;<span class="hljs-keyword">\heiti</span> <span class="hljs-keyword">\sanhao</span> 基于深度学习图像分割筛选优质蚕细胞&#125;&#125;<br>&#125;<br><br><span class="hljs-keyword">\vspace</span>&#123;1cm&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;center&#125;<br>&#123;<br>    <span class="hljs-keyword">\kaishu</span> <span class="hljs-keyword">\sihao</span> <span class="hljs-keyword">\setlength</span>&#123;<span class="hljs-keyword">\baselineskip</span>&#125;&#123;35pt&#125; <span class="hljs-comment">%pt磅的意思，调整&#123;&#125;中的行距为35磅</span><br><br>学 <span class="hljs-keyword">\hspace</span>&#123;1.4em&#125; 院 <span class="hljs-keyword">\uline</span>&#123;<span class="hljs-keyword">\qquad</span> 计算机与电子信息 <span class="hljs-keyword">\qquad</span>&#125;<br><br>专 <span class="hljs-keyword">\hspace</span>&#123;1.4em&#125; 业 <span class="hljs-keyword">\uline</span>&#123;<span class="hljs-keyword">\qquad</span> 计算机科学与技术 <span class="hljs-keyword">\qquad</span>&#125;<br><br>姓 <span class="hljs-keyword">\hspace</span>&#123;1.4em&#125; 名 <span class="hljs-keyword">\uline</span>&#123;<span class="hljs-keyword">\qquad</span> ~~~~~~ 李旺冬 ~~~~~~~ <span class="hljs-keyword">\qquad</span>&#125;<br><br>学 <span class="hljs-keyword">\hspace</span>&#123;1.4em&#125; 号 <span class="hljs-keyword">\uline</span>&#123;<span class="hljs-keyword">\qquad</span> ~~~ 1907310426 ~~~ <span class="hljs-keyword">\qquad</span>&#125;<br><br>班 <span class="hljs-keyword">\hspace</span>&#123;1.4em&#125; 级 <span class="hljs-keyword">\uline</span>&#123;~~~ 计算机与科学192班 <span class="hljs-keyword">\quad</span> ~&#125;<br><br>任课老师 <span class="hljs-keyword">\uline</span>&#123;<span class="hljs-keyword">\qquad</span> ~~~~~~ 徐开遵 ~~~~~~~ <span class="hljs-keyword">\qquad</span>&#125;<br><br><span class="hljs-comment">%上面的空行必须有,\hspace&#123;&#125;可以调字间的宽度，~当空格来用</span><br>&#125;<br><span class="hljs-keyword">\vspace</span>&#123;3.5cm&#125;&#123;<span class="hljs-keyword">\songti</span> <span class="hljs-keyword">\xiaoer</span> 2021年8月7日&#125;<br><span class="hljs-keyword">\end</span>&#123;center&#125;<br><span class="hljs-comment">%===================================封面===========================================================</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%===================================摘要===========================================================</span><br><span class="hljs-keyword">\clearpage</span> <span class="hljs-comment">%新建一页</span><br><span class="hljs-keyword">\thispagestyle</span>&#123;empty&#125; <span class="hljs-comment">%当前页不显示页码</span><br><br><span class="hljs-keyword">\renewcommand</span>&#123;<span class="hljs-keyword">\abstractname</span>&#125;&#123;<span class="hljs-keyword">\heiti</span> <span class="hljs-keyword">\sihao</span> 摘要<span class="hljs-keyword">\\</span>&#125;<br><span class="hljs-keyword">\begin</span>&#123;abstract&#125;<br>&#123;<br><span class="hljs-keyword">\singlespacing</span> <span class="hljs-comment">%单倍行距</span><br><span class="hljs-keyword">\songti</span> <span class="hljs-keyword">\xiaosi</span> <span class="hljs-comment">%\hspace&#123;0.6em&#125;首行缩进两个字符</span><br><span class="hljs-keyword">\hspace</span>&#123;0.6em&#125;今天天气很好，我觉得今天天气很好，我觉得今天天气很好，我觉得今天天气很好<br><br><span class="hljs-keyword">\hspace</span>&#123;0.6em&#125;今天天气很好，我觉得今天天气很好，我觉得今天天气很好，我觉得今天天气很好<br><br><span class="hljs-comment">%上面的空行必须有</span><br>&#125;<br><span class="hljs-keyword">\end</span>&#123;abstract&#125;<br><span class="hljs-keyword">\par</span>&#123;<span class="hljs-keyword">\heiti</span> <span class="hljs-keyword">\sihao</span> <span class="hljs-keyword">\bfseries</span> 关键词：&#125;&#123;<span class="hljs-keyword">\heiti</span> <span class="hljs-keyword">\xiaosi</span> 一二三，二三四&#125;<br><span class="hljs-comment">%===================================摘要===========================================================</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%===================================目录===========================================================</span><br><span class="hljs-keyword">\clearpage</span> <span class="hljs-comment">%新建一页</span><br><span class="hljs-keyword">\thispagestyle</span>&#123;empty&#125; <span class="hljs-comment">%当前页不显示页码</span><br><span class="hljs-keyword">\tableofcontents</span><br><br><span class="hljs-comment">%===================================目录===========================================================</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-comment">%===================================正文===========================================================</span><br><span class="hljs-comment">%==================================================================================================</span><br><span class="hljs-keyword">\clearpage</span> <span class="hljs-comment">%新建一页</span><br><span class="hljs-keyword">\thispagestyle</span>&#123;plain&#125; <span class="hljs-comment">%无页眉，页脚为居中页码</span><br><span class="hljs-keyword">\setcounter</span>&#123;page&#125;&#123;1&#125; <span class="hljs-comment">%从下面开始编页码</span><br><span class="hljs-keyword">\appendix</span> <span class="hljs-comment">%在这之后的标题没有序号</span><br><span class="hljs-keyword">\section</span>&#123;一、标题&#125;<br>&#123;<br>    <span class="hljs-keyword">\singlespacing</span> <span class="hljs-comment">%单倍行距</span><br><span class="hljs-keyword">\songti</span> <span class="hljs-keyword">\xiaosi</span> <span class="hljs-comment">%\hspace&#123;0.6em&#125;首行缩进两个字符</span><br><span class="hljs-keyword">\hspace</span>&#123;0.6em&#125;今天天气很好，<span class="hljs-keyword">\cite</span>&#123;zhou2018unet++&#125; 我觉得今天天气很好，我觉得今天天气很好，我觉得今天天气很好<br><br><span class="hljs-keyword">\hspace</span>&#123;0.6em&#125;今天天气很好，<span class="hljs-keyword">\cite</span>&#123;peng2019end&#125; 我觉得今天天气很好，我觉得今天天气很好，我觉得今天天气很好<br><br><span class="hljs-comment">%上面的空行必须有</span><br>     &#125;<br><span class="hljs-keyword">\subsection</span>&#123;(1)二级标题&#125; <span class="hljs-comment">%需要运行两次才有，不知道为啥</span><br><span class="hljs-keyword">\subsubsection</span>&#123;1.三级标题&#125;<br><span class="hljs-keyword">\subsection</span>&#123;(2)二级标题&#125;<br><span class="hljs-keyword">\subsubsection</span>&#123;1.三级标题&#125;<br><br><br><span class="hljs-comment">%==================================================================================================</span><br><span class="hljs-keyword">\clearpage</span> <span class="hljs-comment">%新建一页</span><br><span class="hljs-keyword">\thispagestyle</span>&#123;plain&#125; <span class="hljs-comment">%无页眉，页脚为居中页码</span><br><span class="hljs-keyword">\setcounter</span>&#123;page&#125;&#123;2&#125; <span class="hljs-comment">%从下面开始编页码</span><br><span class="hljs-keyword">\section</span>&#123;二、标题&#125; <br><span class="hljs-keyword">\subsection</span>&#123;(1)二级标题&#125; <span class="hljs-comment">%需要运行两次才有，不知道为啥</span><br><span class="hljs-keyword">\subsubsection</span>&#123;1.三级标题&#125;<br><span class="hljs-keyword">\subsection</span>&#123;(2)二级标题&#125;<br><span class="hljs-keyword">\subsubsection</span>&#123;1.三级标题&#125;<br><br><span class="hljs-keyword">\clearpage</span> <span class="hljs-comment">%新建一页</span><br><span class="hljs-keyword">\setcounter</span>&#123;page&#125;&#123;3&#125; <span class="hljs-comment">%从下面开始编页码</span><br><br><span class="hljs-comment">%===================================正文===========================================================</span><br><span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><br><span class="hljs-comment">%===================================参考文献========================================================</span><br><span class="hljs-keyword">\bibliography</span>&#123;ref&#125;<br><span class="hljs-comment">%===================================参考文献========================================================</span><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></div></td></tr></table></figure><p>效果如下：</p><img src="/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/1.png" style="zoom:50%;"><img src="/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/2.png" style="zoom:50%;"><img src="/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/3.png" style="zoom:50%;"><img src="/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/4.png" style="zoom:50%;"><img src="/2021/08/07/Latex%E8%AE%BA%E6%96%87%E6%A0%B7%E5%BC%8F/5.png" style="zoom:50%;"><p>全部文件如下：</p><p>链接：<a href="https://pan.baidu.com/s/13n1QH-XmrXpEJI2r1EcshA">https://pan.baidu.com/s/13n1QH-XmrXpEJI2r1EcshA</a><br>提取码：ouu0</p><p>生成的PDF如果需要转word格式，请点击下面的链接，转换的效果还是不错的，只需要细节处检查一些格式即可</p><p><a href="https://www.ilovepdf.com/pdf_to_word">PDF to WORD | Convert PDF to Word online for free (ilovepdf.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OCR-(DB+CRNN)-代码分析-实践环境配置及运行</title>
    <link href="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
    <url>/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代码下载及环境配置"><a href="#代码下载及环境配置" class="headerlink" title="代码下载及环境配置"></a>代码下载及环境配置</h2><p>首先是代码下载，<a href="https://github.com/WenmuZhou/DBNet.pytorch">DBNet代码</a></p><p>使用 <code>git clone</code> 的方式下载上述代码即可。</p><p>使用conda来install一些必要的库</p><p>我对代码文件夹中的README.MD文件做了一个简化，只需要按照接下来的步骤按照虚拟环境即可，若中途出现超时报错，请多换几次源(对此深感无奈)。</p><p>先执行一下命令，构建一个初步的虚拟环境</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">conda</span> <span class="hljs-string">create</span> <span class="hljs-string">-n</span> <span class="hljs-string">dbnet</span> <span class="hljs-string">python=3.6</span><br><span class="hljs-string">activate</span> <span class="hljs-string">dbnet</span><br><span class="hljs-string">conda</span> <span class="hljs-string">install</span> <span class="hljs-string">ipython</span> <span class="hljs-string">pip</span><br><span class="hljs-string">pip</span> <span class="hljs-string">anyconfig==0.9.10</span><br><span class="hljs-string">pip</span> <span class="hljs-string">future==0.18.2</span><br><span class="hljs-string">pip</span> <span class="hljs-string">imgaug==0.4.0</span><br><span class="hljs-string">pip</span> <span class="hljs-string">matplotlib==3.1.2</span><br><span class="hljs-string">pip</span> <span class="hljs-string">numpy==1.17.4</span><br><span class="hljs-string">pip</span> <span class="hljs-string">opencv-python==4.1.2.30</span><br><span class="hljs-string">pip</span> <span class="hljs-string">Polygon3==3.0.8</span><br><span class="hljs-string">pip</span> <span class="hljs-string">pyclipper==1.1.0.post3</span><br><span class="hljs-string">pip</span> <span class="hljs-string">PyYAML==5.2</span><br><span class="hljs-string">pip</span> <span class="hljs-string">scikit-image==0.16.2</span><br><span class="hljs-string">pip</span> <span class="hljs-string">tensorboard==2.1.0</span><br><span class="hljs-string">pip</span> <span class="hljs-string">tqdm==4.40.1</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">natsort</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">addict</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">cudatoolkit==10.2.89</span> <span class="hljs-comment">#这个需要根据自己的电脑配置来确定</span><br></code></pre></div></td></tr></table></figure><p>接下来的几个库，需要我们下载<code>.whl</code>来辅助下载，否则会非常慢，甚至找不到下载资源。</p><p>他们分别是这几个库</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">cudnn-7.6.5-cuda10.2_0</span> <span class="hljs-comment">#这个需要根据自己的电脑配置来确定</span><br><span class="hljs-string">Shapely-1.6.4.post2-cp36-cp36m-win_amd64</span><br><span class="hljs-string">torch-1.7.1-cp36-cp36m-win_amd64</span><br><span class="hljs-string">torchvision-0.8.2-cp36-cp36m-win_amd64</span><br></code></pre></div></td></tr></table></figure><p>我在这里放一下百度网盘的连接</p><p>链接：<a href="https://pan.baidu.com/s/1r1mpHcDWKvNwUqR60h5-Vw">https://pan.baidu.com/s/1r1mpHcDWKvNwUqR60h5-Vw</a><br>提取码：8ypv</p><h2 id="训练步骤"><a href="#训练步骤" class="headerlink" title="训练步骤"></a>训练步骤</h2><p>首先需要修改一些配置文件</p><p>进入<code>git clone</code>好的代码文件中。</p><p>首先看config文件夹下的一些配置文件：这些配置文件中的内容包括了backbone使用何种网络模型来进行特征提取，</p><p>是否采用dcn空洞卷积来增大感受野，训练数据和测试数据的一个存放位置，是否启用预训练模式，epochs，各种参数等…</p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/2.png"></p><p>接着查看tools文件夹下的train.py</p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/1.png"></p><p>将原来的”config/…….”配置文件的<strong>相对路径</strong>改为具体采用的配置方案的配置文件的<strong>绝对路径</strong></p><p>例如我采用的是<code>icdar2015_resnet18_FPN_DBhead_polyLR.yaml</code></p><p>改好之后，按照图片中的格式，修改所选择的配置文件中一些关于数据的存放路径(注：train.txt和test.txt文件夹还未生成，先按代码文件夹下的README.MD，在datasets文件夹下，分别放好<strong>train,test文件夹下的gt和img</strong>)</p><p><a href="https://blog.csdn.net/weixin_45779880/article/details/105642393">数据集下载链接</a></p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/3.png"></p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/4.png"></p><p>接下来按照<code>load.py</code>代码，生成<code>train.txt</code>和<code>test.txt</code>两个文件<img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/5.png"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_images</span>(<span class="hljs-params">img_path</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    find image files in data path</span><br><span class="hljs-string">    :return: list of files found</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    img_path = os.path.abspath(img_path)<br>    files = []<br>    exts = [<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>, <span class="hljs-string">&#x27;JPG&#x27;</span>, <span class="hljs-string">&#x27;PNG&#x27;</span>]<br>    <span class="hljs-keyword">for</span> parent, dirnames, filenames <span class="hljs-keyword">in</span> os.walk(img_path):<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            <span class="hljs-keyword">for</span> ext <span class="hljs-keyword">in</span> exts:<br>                <span class="hljs-keyword">if</span> filename.endswith(ext):<br>                    files.append(os.path.join(parent, filename))<br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Find &#123;&#125; images&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(files)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(files)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_txts</span>(<span class="hljs-params">txt_path</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    find gt files in data path</span><br><span class="hljs-string">    :return: list of files found</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    txt_path = os.path.abspath(txt_path)<br>    files = []<br>    exts = [<span class="hljs-string">&#x27;txt&#x27;</span>]<br>    <span class="hljs-keyword">for</span> parent, dirnames, filenames <span class="hljs-keyword">in</span> os.walk(txt_path):<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>            <span class="hljs-keyword">for</span> ext <span class="hljs-keyword">in</span> exts:<br>                <span class="hljs-keyword">if</span> filename.endswith(ext):<br>                    files.append(os.path.join(parent, filename))<br>                    <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Find &#123;&#125; txts&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(files)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(files)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> json<br>    <span class="hljs-comment">#img_path = &#x27;./data/ch4_training_images&#x27;</span><br>    <span class="hljs-comment">#img_path = &#x27;./train/img&#x27;</span><br>    img_path = <span class="hljs-string">&#x27;./test/img&#x27;</span><br>    files = get_images(img_path)<br>    <span class="hljs-comment">#txt_path = &#x27;./data/ch4_training_localization_transcription_gt&#x27;</span><br>    <span class="hljs-comment">#txt_path = &#x27;./train/gt&#x27;</span><br>    txt_path = <span class="hljs-string">&#x27;./test/gt&#x27;</span><br>    txts = get_txts(txt_path)<br>    n = <span class="hljs-built_in">len</span>(files)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(files) == <span class="hljs-built_in">len</span>(txts)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            line = files[i] + <span class="hljs-string">&#x27;\t&#x27;</span> + txts[i] + <span class="hljs-string">&#x27;\n&#x27;</span><br>            <span class="hljs-comment">#line = files[i] + &#x27; &#x27; + txts[i] + &#x27;\n&#x27;</span><br>            f.write(line)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dataset generated ^_^ &#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>运行tools文件夹下的train.py，即可开始训练</p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/6.png"></p><p>训练结果model_best.pth位置如下</p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/7.png"></p><h2 id="预测步骤"><a href="#预测步骤" class="headerlink" title="预测步骤"></a>预测步骤</h2><p>将红框中的路径，全部改为对应的<strong>model_best.pth</strong>，准备预测的图片，和预测结果的存放文件的绝对地址。</p><p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/8.png"></p><p>注意第二个红框，原代码中拼写有误。进行修改之后即可运行<code>predict.py</code>，然后即可在输出文件中查看训练结果。</p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/9.png" style="zoom:50%;"><h2 id="整体网络模型构建代码"><a href="#整体网络模型构建代码" class="headerlink" title="整体网络模型构建代码"></a>整体网络模型构建代码</h2><p><code>models/model.py</code></p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/10.png" style="zoom:80%;"><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, model_config: <span class="hljs-built_in">dict</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        PANnet</span><br><span class="hljs-string">        :param model_config: 模型配置</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        model_config = <span class="hljs-type">Dict</span>(model_config)<br>        backbone_type = model_config.backbone.pop(<span class="hljs-string">&#x27;type&#x27;</span>)<br>        neck_type = model_config.neck.pop(<span class="hljs-string">&#x27;type&#x27;</span>)<br>        head_type = model_config.head.pop(<span class="hljs-string">&#x27;type&#x27;</span>)    <span class="hljs-comment">#**将字典model_config中的backbone键的值全部解析出来</span><br>        <span class="hljs-comment"># backbone主干特征提取网络(和普通的resnet18网络模型一样，只是可以选择是否使用空洞卷积dcn来扩大感受野)</span><br>        <span class="hljs-comment"># 主干网络大多时候指的是提取特征的网络，其作用就是提取图片中的信息，供后面的网络使用</span><br>        self.backbone = build_backbone(backbone_type, **model_config.backbone)<br><br>        <span class="hljs-comment"># neck使用的是FPN特征金字塔(FPN是一种利用常规CNN模型来高效提取图片中各维度特征的方法。)</span><br>        <span class="hljs-comment"># 其中neck的in_channels是由backbone的out_channels传进来的</span><br>        <span class="hljs-comment"># neck是放在backbone和head之间的，是为了更好的利用backbone提取的特征</span><br>        self.neck = build_neck(neck_type, in_channels=self.backbone.out_channels, **model_config.neck)<br><br>        <span class="hljs-comment"># head是获取网络输出内容的网络，利用之前提取的特征，head利用这些特征，做出预测。</span><br>        self.head = build_head(head_type, in_channels=self.neck.out_channels, **model_config.head)<br><br>        <span class="hljs-comment"># 给参数配置文件取一个名</span><br>        self.name = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;backbone_type&#125;</span>_<span class="hljs-subst">&#123;neck_type&#125;</span>_<span class="hljs-subst">&#123;head_type&#125;</span>&#x27;</span><br>        <br>    <span class="hljs-comment"># 前向传播</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        _, _, H, W = x.size()<br>        backbone_out = self.backbone(x)<br>        neck_out = self.neck(backbone_out)<br>        y = self.head(neck_out)<br>        <span class="hljs-comment">#为了保险起见，再对y进行一次插值操作，使其尺寸与原图相同。</span><br>        y = F.interpolate(y, size=(H, W), mode=<span class="hljs-string">&#x27;bilinear&#x27;</span>, align_corners=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># 整个模型最终得到的就是从head模型中输出的y</span><br>    <span class="hljs-comment"># 这个y最终会给到tools文件夹下的predict.py里的preds，</span><br>    <span class="hljs-comment"># 这个preds会喂给post_processing文件夹下的SegDetectorRepresenter()</span><br>    <span class="hljs-comment"># 并通过这个post_processing来获得后处理得到的文本框</span><br>    <span class="hljs-comment"># 如果是训练时，y会传给tools文件夹中的train.py文件</span><br></code></pre></div></td></tr></table></figure><p><code>models/backbone/resnet.py</code>     <strong>Resnet18的网络模型构建         <img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/11.png" style="zoom: 80%;"></strong></p><p>特征提取</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># resnet18和resnet34用的是BasicBlock，</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicBlock</span>(<span class="hljs-params">nn.Module</span>):</span><br>    expansion = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 卷积步长stride = 1，扩张大小dilation = 1(也就是padding)，</span><br>    <span class="hljs-comment"># in_planes和out_planes分别是输入和输出的通道数，</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, inplanes, planes, stride=<span class="hljs-number">1</span>, downsample=<span class="hljs-literal">None</span>, dcn=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">super</span>(BasicBlock, self).__init__()<br>        self.with_dcn = dcn <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-comment"># dcn参数指deformable convolution(空洞卷积)的参数设置</span><br>        self.conv1 = conv3x3(inplanes, planes, stride) <span class="hljs-comment"># 普通尺度不变的卷积核</span><br>        self.bn1 = BatchNorm2d(planes) <span class="hljs-comment">#BN</span><br>        self.relu = nn.ReLU(inplace=<span class="hljs-literal">True</span>) <span class="hljs-comment">#Relu</span><br>        self.with_modulated_dcn = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.with_dcn: <span class="hljs-comment"># 不使用dcn空洞卷积</span><br>            self.conv2 = nn.Conv2d(planes, planes, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 使用dcn空洞卷积</span><br>            <span class="hljs-keyword">from</span> torchvision.ops <span class="hljs-keyword">import</span> DeformConv2d<br>            deformable_groups = dcn.get(<span class="hljs-string">&#x27;deformable_groups&#x27;</span>, <span class="hljs-number">1</span>)<br>            offset_channels = <span class="hljs-number">18</span><br>            self.conv2_offset = nn.Conv2d(planes, deformable_groups * offset_channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>            self.conv2 = DeformConv2d(planes, planes, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>)<br>        self.bn2 = BatchNorm2d(planes)<br>        self.downsample = downsample<br>        self.stride = stride<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        residual = x<br><br>        out = self.conv1(x)<br>        out = self.bn1(out)<br>        out = self.relu(out)<br><br>        <span class="hljs-comment"># out = self.conv2(out)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.with_dcn: <span class="hljs-comment">#如果不使用dcn空洞卷积</span><br>            out = self.conv2(out)<br>        <span class="hljs-keyword">else</span>:<br>            offset = self.conv2_offset(out)<br>            out = self.conv2(out, offset)<br>        out = self.bn2(out)<br>        <span class="hljs-comment"># 缩小图像（或称为下采样（subsampled）或降采样（downsampled））的主要目的是两个：</span><br>        <span class="hljs-comment"># 使得图像符合显示区域的大小；</span><br>        <span class="hljs-comment"># 生成对应图像的缩略图；</span><br>        <span class="hljs-comment"># 目的是为了让residual和out的尺度相同，只有相同才能进行out += residual操作</span><br>        <span class="hljs-keyword">if</span> self.downsample <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            residual = self.downsample(x)<br><br>        out += residual<br>        out = self.relu(out)<br><br>        <span class="hljs-keyword">return</span> out<br>  <span class="hljs-comment">#==================================================================================================  </span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>        x = self.conv1(x)<br>        x = self.bn1(x)<br>        x = self.relu(x)<br>        x = self.maxpool(x)<br><br>        x2 = self.layer1(x)<br>        x3 = self.layer2(x2)<br>        x4 = self.layer3(x3)<br>        x5 = self.layer4(x4)<br>        <span class="hljs-comment"># 这里的x2...5对应的就是原图尺寸1/2,1/4,1/8,1/16,1/32的特征向量</span><br>        <span class="hljs-comment"># 会作为backbone_out传入neck中，在FPN特征金字塔做upsample_add和upsample_cat</span><br>        <span class="hljs-keyword">return</span> x2, x3, x4, x5<br>    <br></code></pre></div></td></tr></table></figure><p><code>models/neck/FPN.py</code>        <strong>FPN特征金字塔</strong>                      <img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/12.png" style="zoom: 80%;"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span><br>    c2, c3, c4, c5 = x<br>    <span class="hljs-comment"># 此处的x含有backbon的各层信息</span><br>    <span class="hljs-comment"># 这里将x的1/32，1/16，1/8，1/4各层分别交给c5,c4,c3,c2</span><br>    <span class="hljs-comment"># 这里的1/32，1/16，1/8，1/4指的是原图尺寸的多少份之一</span><br>    <span class="hljs-comment"># Top-down</span><br>    <span class="hljs-comment"># 经过reduce_conv_c5(c5)，p5尺度不变，channels变为256</span><br>    p5 = self.reduce_conv_c5(c5)<br>    <span class="hljs-comment"># 经过_upsample_add(p5, self.reduce_conv_c4(c4))，</span><br>    <span class="hljs-comment"># p4是由“‘c5增加通道数为256之后得到的p5&#x27;和&#x27;增加通道数为256的c4’进行一个相加，并上采样得到的”</span><br>    p4 = self._upsample_add(p5, self.reduce_conv_c4(c4))<br>    p4 = self.smooth_p4(p4)<br>    p3 = self._upsample_add(p4, self.reduce_conv_c3(c3))<br>    p3 = self.smooth_p3(p3)<br>    p2 = self._upsample_add(p3, self.reduce_conv_c2(c2))<br>    p2 = self.smooth_p2(p2)<br>    <span class="hljs-comment"># 这里的p4,p3,p2是对应neck网络模型中的3个部分</span><br><br>    <span class="hljs-comment">#x此时获得了&#123;p2,p3,p4,p5先upsample到和p2一样原图1/2的尺寸，然后再进行conv-cat融合&#125;</span><br>    x = self._upsample_cat(p2, p3, p4, p5)<br>    <span class="hljs-comment"># 融合几个张量后再卷积</span><br>    x = self.conv(x)<br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-comment">#上采样过程是用pytorch库中的import torch.nn.functional as F中的interpolate完成的，将上采样的结果再与相同尺寸的数据进行相加</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_upsample_add</span>(<span class="hljs-params">self, x, y</span>):</span><br>    <span class="hljs-keyword">return</span> F.interpolate(x, size=y.size()[<span class="hljs-number">2</span>:]) + y<br>    <span class="hljs-comment">#将x的size插值为y的尺寸(使得尺寸相同)(upsample)，再与y相加(add)，合起来就是upsample_add</span><br><br><span class="hljs-comment">#通过上采样将p3,p4,p5的尺寸均插值为p2的1/4尺寸。将结果赋值给x，之后x再进行一个conv(x)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_upsample_cat</span>(<span class="hljs-params">self, p2, p3, p4, p5</span>):</span><br>    h, w = p2.size()[<span class="hljs-number">2</span>:]<br>    p3 = F.interpolate(p3, size=(h, w))<br>    p4 = F.interpolate(p4, size=(h, w))<br>    p5 = F.interpolate(p5, size=(h, w))<br>    <span class="hljs-comment"># 再进行p2,p3,p4,p5这几个张量tensor形式的图进行融合，</span><br>    <span class="hljs-comment"># 并且是按维数1拼接（横着拼）</span><br>    <span class="hljs-keyword">return</span> torch.cat([p2, p3, p4, p5], dim=<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># cat是concatnate的意思：拼接，联系在一起。</span><br>    <span class="hljs-comment"># 按维数1拼接（横着拼），将多个tensor向量进行拼接联系起来</span><br></code></pre></div></td></tr></table></figure><p><code>models/head/DBHead.py</code>           <strong>DBNet核心模型</strong>       <img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/13.png" style="zoom: 80%;"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBHead</span>(<span class="hljs-params">nn.Module</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, in_channels, out_channels, k = <span class="hljs-number">50</span></span>):</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.k = k<br><br>        <span class="hljs-comment"># binarize把从backbone和neck进行特征融合后的原图尺寸1/4的结果进行卷积操作</span><br>        <span class="hljs-comment"># 之后得到的probability map(概率图)</span><br>        self.binarize = nn.Sequential(<br>            nn.Conv2d(in_channels, in_channels // <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.BatchNorm2d(in_channels // <span class="hljs-number">4</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.ConvTranspose2d(in_channels // <span class="hljs-number">4</span>, in_channels // <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>            nn.BatchNorm2d(in_channels // <span class="hljs-number">4</span>),<br>            nn.ReLU(inplace=<span class="hljs-literal">True</span>),<br>            nn.ConvTranspose2d(in_channels // <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>            nn.Sigmoid())<br>        self.binarize.apply(self.weights_init)<br><br>        <span class="hljs-comment"># thresh把从backbone和neck进行特征融合后的原图尺寸1/4的结果</span><br>        <span class="hljs-comment"># 用来计算threshold map</span><br>        self.thresh = self._init_thresh(in_channels)<br>        self.thresh.apply(self.weights_init)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, x</span>):</span> <span class="hljs-comment"># x是从neck中的到的1/4原图尺寸的一个张量结果，也就是neck_out</span><br>        <span class="hljs-comment"># shrink_maps也就是probability map</span><br>        <span class="hljs-comment"># 将从backbone和neck结合后得到的x再分别传入binarize函数，和thresh函数</span><br>        <span class="hljs-comment"># 得到probability map和threshold_maps</span><br>        shrink_maps = self.binarize(x) <span class="hljs-comment">#probability map其实就是shrink_map</span><br>        threshold_maps = self.thresh(x)<br>        <span class="hljs-comment"># 如果是在训练过程中使用模型，则self.training为True</span><br>        <span class="hljs-comment"># 则将进行一个可微分的二值化操作，通过probability map和threshold_maps，使用DB函数进行计算得到结果</span><br>        <span class="hljs-keyword">if</span> self.training:<br>            <span class="hljs-comment"># 则将进行一个可微分的二值化操作，通过probability map和threshold_maps，</span><br>            <span class="hljs-comment"># 使用step_function函数(DB函数进)行计算得到结果</span><br>            <span class="hljs-comment"># 将该结果赋值给binary_maps，并在融合时，除了shrink_maps,threshold_maps</span><br>            <span class="hljs-comment"># 还需要融合binary_maps</span><br>            binary_maps = self.step_function(shrink_maps, threshold_maps)<br>            <span class="hljs-comment"># 再进行两个张量tensor形式的图进行融合，并且是按维数1拼接（横着拼）</span><br>            y = torch.cat((shrink_maps, threshold_maps, binary_maps), dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 预测过程</span><br>            <span class="hljs-comment"># 再进行两个张量tensor形式的图进行融合，并且是按维数1拼接（横着拼）</span><br>            y = torch.cat((shrink_maps, threshold_maps), dim=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> y <span class="hljs-comment"># y是最终的一个预测结果</span><br></code></pre></div></td></tr></table></figure><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/14.png" style="zoom: 50%;"><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step_function</span>(<span class="hljs-params">self, x, y</span>):</span><br>    <span class="hljs-keyword">return</span> torch.reciprocal(<span class="hljs-number">1</span> + torch.exp(-self.k * (x - y)))<br>    <span class="hljs-comment"># 这个step_function就是Differentiable binarization的公式</span><br></code></pre></div></td></tr></table></figure><p><strong>流程：</strong>主model.py最终从backbone–neck–DB得到的y，如果是训练，则传给train.py；如果是预测，则传给predict.py。</p><h2 id="训练部分代码"><a href="#训练部分代码" class="headerlink" title="训练部分代码"></a>训练部分代码</h2><h4 id="tools-train-py"><a href="#tools-train-py" class="headerlink" title="tools/train.py"></a><code>tools/train.py</code></h4><p> 一些训练的设置，重点是其在评估方法时，采用的是<code>quad_metric.py</code>中的方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 后处理，获取文本框，这里也是一个重要的步骤</span><br>post_p = get_post_processing(config[<span class="hljs-string">&#x27;post_processing&#x27;</span>])<br><br><span class="hljs-comment"># 在utils文件夹下的ocr_metric中，传入metric配置信息，实例化一个metric</span><br><span class="hljs-comment"># 从配置信息可以看处，config[&#x27;metric&#x27;]中配置的信息是</span><br><span class="hljs-comment"># utils文件夹下，ocr_metric文件夹下，icdar2015文件夹下的quad_metric.py文件</span><br><span class="hljs-comment"># 所使用的方法也就是quad_metric</span><br><span class="hljs-comment"># 用法就是：每多少个epoch，调用其measure函数，就进行一下评估，</span><br><span class="hljs-comment"># 评估的东西可以从trainer.train()中看出，是boxes和scores两个东西，</span><br><span class="hljs-comment"># metric_cls.validate_measure(batch, (boxes, scores))</span><br><span class="hljs-comment"># boxes, scores = self.post_process(batch, preds,is_output_polygon=self.metric_cls.is_output_polygon)</span><br><span class="hljs-comment"># 这两个是通过后处理post_process得到的&quot;构成原文本框的的所有点boxes&quot;和&quot;一个文本框的概率均值scores&quot;</span><br><br><span class="hljs-comment"># 当然不止，quad_metric总共有三个评估措施</span><br><span class="hljs-comment"># validate_measure()，evaluate_measure()，gather_measure()</span><br><span class="hljs-comment"># 返回一个result</span><br>metric = get_metric(config[<span class="hljs-string">&#x27;metric&#x27;</span>])<br></code></pre></div></td></tr></table></figure><h4 id="trainer-trainer-py-重点：其中评估方法quad-metric-py文件"><a href="#trainer-trainer-py-重点：其中评估方法quad-metric-py文件" class="headerlink" title="trainer/trainer.py                        重点：其中评估方法quad_metric.py文件"></a><code>trainer/trainer.py</code>                        <strong>重点：</strong>其中评估方法quad_metric.py文件</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># preds：从网络模型的head中输出的一个二维的包含probability map和threshold map两个张量的张量</span><br>            preds = self.model(batch[<span class="hljs-string">&#x27;img&#x27;</span>])<br>        <br>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_eval</span>(<span class="hljs-params">self, epoch</span>):</span> <br><span class="hljs-comment">#==========================================================================================</span><br>                <span class="hljs-comment"># 将每一个批量的boxes(预测框的点)和scores传入metric_cls中的评估方法中</span><br>                <span class="hljs-comment"># 这个metric_cls是在utils文件夹下，ocr_metric文件夹下，</span><br>                <span class="hljs-comment"># icdar2015文件夹下的quad_metric.py文件中的方法</span><br>                <span class="hljs-comment"># 疯狂套娃，各种递归传回，太累了</span><br>                <span class="hljs-comment"># 这里raw_metric最终得到的是经过最终在utils/ocr_metric/icdar2015/detection/iou.py文件传回的</span><br>                <span class="hljs-comment"># 含有recall, precision，iou等一系列的值</span><br>                <span class="hljs-comment"># 这一系列的值用一个字典的形式传回给raw_metric</span><br><br>                <span class="hljs-comment"># raw_metric是从iou.py文件中返回的一个batch的评估信息字典</span><br>                raw_metric = self.metric_cls.validate_measure(batch, (boxes, scores))<br>                raw_metrics.append(raw_metric) <span class="hljs-comment"># 有很多个batch</span><br>        <span class="hljs-comment"># 用quad_metric.py文件中的gather_measure函数</span><br>        <span class="hljs-comment"># 求整个数据集的recall，precision等评估结果</span><br>        <span class="hljs-comment"># metrics 才是整个数据集的评估信息字典</span><br>        <span class="hljs-comment"># 这里的metrics是调用了quad_metric.py文件中的gather_measure方法</span><br>        metrics = self.metric_cls.gather_measure(raw_metrics)<br>        <br></code></pre></div></td></tr></table></figure><h4 id="训练的batch以及总体的评估"><a href="#训练的batch以及总体的评估" class="headerlink" title="训练的batch以及总体的评估"></a>训练的batch以及总体的评估</h4><h5 id="utils-ocr-metric-icdar2015-quad-metric-py"><a href="#utils-ocr-metric-icdar2015-quad-metric-py" class="headerlink" title="utils/ocr_metric/icdar2015/quad_metric.py"></a><code>utils/ocr_metric/icdar2015/quad_metric.py</code></h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuadMetric</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, is_output_polygon=<span class="hljs-literal">False</span></span>):</span><br>        self.is_output_polygon = is_output_polygon<br><span class="hljs-comment">#------------------------------------------------------------------------------------</span><br>        <span class="hljs-comment"># DetectionIoUEvaluator是评估器(核心，重点)，最终的评估是在这里面完成</span><br>        <span class="hljs-comment"># 然后将结果返回给evaluator</span><br>        <span class="hljs-comment"># 这个DetectionIoUEvaluator方法是utils文件夹下，ocr_metric文件夹下，icdar2015文件夹下，</span><br>        <span class="hljs-comment"># 的detection文件夹下的iou.py文件中的一个检测评估类</span><br>        self.evaluator = DetectionIoUEvaluator(is_output_polygon=is_output_polygon)<br><span class="hljs-comment">#------------------------------------------------------------------------------------</span><br><br>    <span class="hljs-comment"># 主方法，下面三个方法其实都是调用measure的</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">measure</span>(<span class="hljs-params">self, batch, output, box_thresh=<span class="hljs-number">0.6</span></span>):</span><br>        <span class="hljs-comment"># 从predict.py中传入的batch是一个字典，[(h,w)]的键是shape</span><br>        <span class="hljs-comment"># h和w代表了原始图片的高度和宽度</span><br>        <span class="hljs-comment"># batch = &#123;&#x27;shape&#x27;: [(h, w)]&#125;</span><br>        <span class="hljs-comment"># 也就是第二个batch</span><br><br>        <span class="hljs-comment"># 从trainer.py中传入的batch可以理解为笼统的batch含义，也就是若干图片</span><br><br>        results = []<br>        <span class="hljs-comment"># 表示有若干个图片，每个图片都有若干个文字框的gt，点坐标</span><br>        <span class="hljs-comment"># 正确的标注就是是groundtruth，用图像标注工具标注的</span><br>        gt_polyons_batch = batch[<span class="hljs-string">&#x27;text_polys&#x27;</span>]<br>        ignore_tags_batch = batch[<span class="hljs-string">&#x27;ignore_tags&#x27;</span>]<br><br><br>        <span class="hljs-comment"># for循环遍历每一张图片，得到这张图片的所有多边形框</span><br>        <span class="hljs-comment"># 包括gt，预测框，分数等内容</span><br>        <span class="hljs-keyword">for</span> polygons, pred_polygons, pred_scores, ignore_tags <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(gt_polyons_batch, pred_polygons_batch, pred_scores_batch, ignore_tags_batch):<br>            <span class="hljs-comment"># 将gt整理成一个列表，每个元素是个字典，代表对应文字框的点坐标和是否忽略</span><br>            gt = [<span class="hljs-built_in">dict</span>(points=np.int64(polygons[i]), ignore=ignore_tags[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(polygons))]<br>            <span class="hljs-keyword">if</span> self.is_output_polygon: <span class="hljs-comment"># 如果要输出的是多边形</span><br>                pred = [<span class="hljs-built_in">dict</span>(points=pred_polygons[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(pred_polygons))]<br>            <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果输出的是矩形，则还要做一个过滤(if pred_scores[i] &gt;= box_thresh(0.6))</span><br>                <span class="hljs-comment"># 意思是说：如果矩形框(文本框)内的文字区域如果是一个极度细长且极度弯曲的文字区域，那么</span><br>                <span class="hljs-comment"># 即使文字区域概率全为1，非文字区域概率全为0，和gt(手工标记的)结果是一样的</span><br>                <span class="hljs-comment"># 但由于pred_scores[i]是计算得到这个文本框内的概率均值，它是由</span><br>                <span class="hljs-comment"># 文字区域的概率，和非文字区域的概率共同决定的一个均值</span><br>                <span class="hljs-comment"># 因为这个矩形文本框中，绝大多数都是非文字区域，</span><br>                <span class="hljs-comment"># 所以计算出来的文本框概率均值可能就会小于box_thresh</span><br>                <span class="hljs-comment"># 如果小于，也就说明这个文字区域是极度弯曲细长的，这样的文本框送给crnn做识别</span><br>                <span class="hljs-comment"># 或者其实给人肉眼看，都没有什么实际意义，所以就将其忽略。</span><br><br>                <span class="hljs-comment"># 如果大于box_thresh(0.6)，则将其放入pred列表中</span><br><br>            <span class="hljs-comment"># 将上述的经过极端情况过滤后的pred列表，以及gt列表，一起传入evaluator方法中</span><br>            <span class="hljs-comment"># 来计算一个batch的</span><br>            <span class="hljs-comment"># 经过for循环，将每个batch中的评估信息，</span><br>            <span class="hljs-comment"># 以字典的形式传入results列表中</span><br>            results.append(self.evaluator.evaluate_image(gt, pred))<br>            <span class="hljs-comment"># 这里重点：evaluator这个是什么，它是从./detection/iou中</span><br>            <span class="hljs-comment"># import 的一个 DetectionIoUEvaluator类</span><br>        <span class="hljs-comment"># 最终返回results列表给trainer.py</span><br>        <span class="hljs-keyword">return</span> results<br><br>    <span class="hljs-comment"># 该方法返回的是一个batch的评估结果，以字典的形式</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate_measure</span>(<span class="hljs-params">self, batch, output, box_thresh=<span class="hljs-number">0.6</span></span>):</span><br>        <span class="hljs-keyword">return</span> self.measure(batch, output, box_thresh)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">evaluate_measure</span>(<span class="hljs-params">self, batch, output</span>):</span><br>        <span class="hljs-keyword">return</span> self.measure(batch, output), np.linspace(<span class="hljs-number">0</span>, batch[<span class="hljs-string">&#x27;image&#x27;</span>].shape[<span class="hljs-number">0</span>]).tolist()<br><br>    <span class="hljs-comment"># 这个方法则是返回所有batch组合(也就是一个数据集)的评估结果</span><br>    <span class="hljs-comment"># raw_metrices是从trainer.py文件中传过来的，</span><br>    <span class="hljs-comment"># 它里面存的是每一个batch所得到的一个评估结果</span><br>    <span class="hljs-comment"># 也就是for循环调用validate_measure之后得到的一个评估合集</span><br>    <span class="hljs-comment"># 现在将这个合集传入gather_measure方法中，</span><br>    <span class="hljs-comment"># 通过这个方法，将这个合集中每一个batch的评估结果进行一个整合</span><br>    <span class="hljs-comment"># 这个方法返回给trainer.py的是整个数据集的一个评估结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gather_measure</span>(<span class="hljs-params">self, raw_metrics</span>):</span><br>        <span class="hljs-comment"># 展平，raw_metrices中的每个元素都是一个batch的评估结果</span><br>        raw_metrics = [image_metrics<br>                       <span class="hljs-keyword">for</span> batch_metrics <span class="hljs-keyword">in</span> raw_metrics<br>                       <span class="hljs-keyword">for</span> image_metrics <span class="hljs-keyword">in</span> batch_metrics]<br><br>        <span class="hljs-comment"># 将raw_metrices传入iou.py文件中的combine_results方法</span><br>        result = self.evaluator.combine_results(raw_metrics)<br><span class="hljs-comment">#=================================================================================</span><br><br>        <span class="hljs-comment"># 将整个数据集的评估结果返回个trainer.py文件中的metrics</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&#x27;precision&#x27;</span>: precision,<br>            <span class="hljs-string">&#x27;recall&#x27;</span>: recall,<br>            <span class="hljs-string">&#x27;fmeasure&#x27;</span>: fmeasure<br>        &#125;<br></code></pre></div></td></tr></table></figure><h5 id="utils-ocr-metric-icdar2015-detection-iou-py"><a href="#utils-ocr-metric-icdar2015-detection-iou-py" class="headerlink" title="utils/ocr_metric/icdar2015/detection/iou.py"></a><code>utils/ocr_metric/icdar2015/detection/iou.py</code></h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">    <br><span class="hljs-comment"># gt是从quad_metric.py中一张图片的多个正确文本框标记</span><br><span class="hljs-comment"># pred也是从quad_metric.py中传入的，是一个存有一张图片中多个probability map的列表</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">evaluate_image</span>(<span class="hljs-params">self, gt, pred</span>):</span> <span class="hljs-comment"># 核心评估函数，评估的是一张图中的若干文字框    </span><br></code></pre></div></td></tr></table></figure><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/15.png" style="zoom: 50%;"><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_union</span>(<span class="hljs-params">pD, pG</span>):</span> <span class="hljs-comment"># 求并集</span><br>    <span class="hljs-keyword">return</span> Polygon(pD).union(Polygon(pG)).area<br><br><span class="hljs-comment"># iou 计算的是 “预测的边框” 和 “真实的边框” 的交集和并集的比值</span><br><span class="hljs-comment"># 即iou = get_intersection(pD, pG) / get_union(pD,pG)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_intersection_over_union</span>(<span class="hljs-params">pD, pG</span>):</span> <span class="hljs-comment"># 求iou</span><br>    <span class="hljs-keyword">return</span> get_intersection(pD, pG) / get_union(pD, pG)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_intersection</span>(<span class="hljs-params">pD, pG</span>):</span> <span class="hljs-comment"># 求交集</span><br>    <span class="hljs-keyword">return</span> Polygon(pD).intersection(Polygon(pG)).area<br></code></pre></div></td></tr></table></figure><p><strong>Precision精确率， Recall召回率，是二分类问题常用的评价指标。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Num det = n</span><br><span class="hljs-comment"># Num pred = m</span><br><span class="hljs-comment"># care det = n&#x27;</span><br><span class="hljs-comment"># care pred = m&#x27;</span><br><span class="hljs-comment"># matched = k  #表示匹配的个数</span><br><span class="hljs-comment"># recall = k / n&#x27;</span><br><span class="hljs-comment"># precision = k / m&#x27;</span><br><span class="hljs-comment"># 计算recall和precision</span><br></code></pre></div></td></tr></table></figure><h2 id="预测部分代码"><a href="#预测部分代码" class="headerlink" title="预测部分代码"></a>预测部分代码</h2><h4 id="tools-predict-py"><a href="#tools-predict-py" class="headerlink" title="tools/predict.py"></a><code>tools/predict.py</code></h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -----------------------------------------------------------------------</span><br>        <span class="hljs-comment">#配置重点：get_post_processing 是获得预测的文本框，</span><br>        <span class="hljs-comment"># 其中根据已配置的文件config中确定的post_processing，</span><br>        <span class="hljs-comment"># 我们选择的post_processing是post_processing文件夹下的</span><br>        <span class="hljs-comment"># seg_detector_representer.py文件</span><br>        self.post_process = get_post_processing(config[<span class="hljs-string">&#x27;post_processing&#x27;</span>])<br>        self.post_process.box_thresh = post_p_thre<br>        <span class="hljs-comment"># 目前只是确定了(配置好)后处理获取文本框所需要用到的方法是</span><br>        <span class="hljs-comment"># SegDetectorRepresenter，在下面的预测中才实际使用它</span><br><span class="hljs-comment"># -----------------------------------------------------------------------</span><br></code></pre></div></td></tr></table></figure><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/16.png" style="zoom: 90%;"><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#--------------------------------------------------------------------------</span><br>            <span class="hljs-comment"># preds：从网络模型的head中输出的一个二维的包含probability map和threshold map两个张量的张量</span><br>            <span class="hljs-comment"># preds是models文件下的model.py中的forward函数中return的y</span><br>            <span class="hljs-comment"># preds的第0个维度为probability map，第二个维度为threshold map</span><br>            preds = self.model(tensor)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(self.device).__contains__(<span class="hljs-string">&#x27;cuda&#x27;</span>):<br>                <span class="hljs-comment"># 等待CUDA上所有流中的所有核心上的操作都完成，使得测试出来的时间更加准确</span><br>                torch.cuda.synchronize(self.device)<br><span class="hljs-comment">#-------------------------------------------------------------------------------</span><br><span class="hljs-comment">#-------------------------------------------------------------------------------</span><br>            <span class="hljs-comment">#获取文本框，实际重点：</span><br>            <span class="hljs-comment"># 后处理后得到最终的文本框box_list</span><br>            <span class="hljs-comment"># 将batch和preds传到post_processing文件夹下的seg_detector_representer.py文件夹下的</span><br>            <span class="hljs-comment"># def __call__():</span><br>            box_list, score_list = self.post_process(batch, preds, is_output_polygon=is_output_polygon)<br>            <span class="hljs-comment"># 因为预测的图片只有一张，所以只需要获取第一个即可</span><br>            box_list, score_list = box_list[<span class="hljs-number">0</span>], score_list[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#--------------------------------------------------------------------------------</span><br></code></pre></div></td></tr></table></figure><h4 id="重点：进行后处理操作"><a href="#重点：进行后处理操作" class="headerlink" title="重点：进行后处理操作"></a>重点：进行后处理操作</h4><p>训练或者预测中====</p><p>用来获取训练<code>train.py</code>时的train数据集中的文本框，</p><p>预测<code>predict.py</code>待预测图片的文本框的操作</p><p> <code>post_processing/seg_detector_representer.py</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># thresh=0.3将用于一个传统的二值化操作，box_thresh筛掉一些无用的文字区域，</span><br>    <span class="hljs-comment"># max_candidates是指一张图片的文字区域最多为1000</span><br>    <span class="hljs-comment"># unclip_ratio(膨胀比率)：因为probability map是shrink后的图片，</span><br>    <span class="hljs-comment"># 需要通过unclip_ratio经过一个公式D‘计算后将probability map经过dilated(膨胀)</span><br>    <span class="hljs-comment"># 来得到一个和文字区域相同的map，unrlip_ratio就是该公式D’的r&#x27;,设置为1.5</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, thresh=<span class="hljs-number">0.3</span>, box_thresh=<span class="hljs-number">0.7</span>, max_candidates=<span class="hljs-number">1000</span>, unclip_ratio=<span class="hljs-number">1.5</span></span>):</span><br>        <br><span class="hljs-comment">#====================================================================================================        </span><br><span class="hljs-comment"># 这里的的batch和pred是从tools文件夹下的predict.py</span><br><span class="hljs-comment"># 或者trainer文件夹下的trainer.py中传过来的batch和preds</span><br><br><span class="hljs-comment"># 最终要将boxes, scores返回给predict.py的两个变量box_list, score_list</span><br><span class="hljs-comment"># 或者返回给trainer.py中的boxes和scores</span><br><span class="hljs-comment"># 即 return boxes, scores</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, batch, pred, is_output_polygon=<span class="hljs-literal">False</span></span>):</span><br>    <br><span class="hljs-comment">#=====================================================================================================</span><br>            <span class="hljs-comment"># 将box存入boxes中，并传入</span><br>            boxes.append(box)<br>            <span class="hljs-comment"># 将函数box_score_fast()计算出来的一张图片的一个文本框的概率均值存入scores</span><br>            scores.append(score)<br>        <span class="hljs-comment"># 将两者分别传回给tools文件夹中的predict.py中的box_list, score_list</span><br>        <span class="hljs-comment"># 并在predict.py中</span><br>        <span class="hljs-comment"># 如果是训练阶段，则似乎将boxes，scores传回给trainer.py中的boxes，scores</span><br>        <span class="hljs-keyword">return</span> boxes, scores<br></code></pre></div></td></tr></table></figure><h2 id="label标签制作"><a href="#label标签制作" class="headerlink" title="label标签制作"></a>label标签制作</h2><p>根据人工标记的gt框(一系列坐标点)，进行一些膨胀(dilate)和缩小(shrink)的操作</p><p>膨胀和缩小的距离：<img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/19.png" style="zoom: 67%;"></p><p>并且做一些gt框内的计算来得到<code>probability_map</code>和<code>threshold_map</code></p><h4 id="data-loader-modules-make-shrink-map-py"><a href="#data-loader-modules-make-shrink-map-py" class="headerlink" title="data_loader/modules/make_shrink_map.py"></a>data_loader/modules/make_shrink_map.py<img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/20.png" style="zoom: 67%;"></h4><h5 id="一个shrink操作："><a href="#一个shrink操作：" class="headerlink" title="一个shrink操作："></a>一个shrink操作：</h5><p>红框为gt框，蓝框为shrink后的结果</p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/17.png" style="zoom: 50%;"><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 所采用的shrink方法         多边形的一系列点， 需要shrink的比率，按照ppt上，所采用的比率为0.4</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shrink_polygon_pyclipper</span>(<span class="hljs-params">polygon, shrink_ratio</span>):</span><br>    <span class="hljs-keyword">from</span> shapely.geometry <span class="hljs-keyword">import</span> Polygon<br>    <span class="hljs-keyword">import</span> pyclipper <span class="hljs-comment"># 该库是创建一个多边形来对原图进行修改，既可以缩小，也可以膨胀</span><br>    polygon_shape = Polygon(polygon) <span class="hljs-comment"># 创建多边形</span><br>    <span class="hljs-comment"># distance的公式是ppt20页的，用来计算具体的一个缩小范围</span><br>    distance = polygon_shape.area * (<span class="hljs-number">1</span> - np.power(shrink_ratio, <span class="hljs-number">2</span>)) / polygon_shape.length<br><br>    subject = [<span class="hljs-built_in">tuple</span>(l) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> polygon]<br>    padding = pyclipper.PyclipperOffset()<br>    padding.AddPath(subject, pyclipper.JT_ROUND, pyclipper.ET_CLOSEDPOLYGON)<br><br>    <span class="hljs-comment"># 因为distance是一个整数，我们需要的是shrink而不是膨胀，所以输入-distance</span><br>    shrinked = padding.Execute(-distance)<br>    <span class="hljs-keyword">if</span> shrinked == []:<br>        shrinked = np.array(shrinked)<br>    <span class="hljs-keyword">else</span>:<br>        shrinked = np.array(shrinked[<span class="hljs-number">0</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> shrinked <span class="hljs-comment"># 返回ppt20页中的构成红框内的“蓝框”的所有点的坐标，蓝框是将红框shrink后得到的</span><br></code></pre></div></td></tr></table></figure><h4 id="data-loader-modules-make-border-map-py"><a href="#data-loader-modules-make-border-map-py" class="headerlink" title="data_loader/modules/make_border_map.py"></a>data_loader/modules/make_border_map.py<img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/21.png" style="zoom: 67%;"></h4><h5 id="shrink操作-dilate操作："><a href="#shrink操作-dilate操作：" class="headerlink" title="shrink操作 + dilate操作："></a>shrink操作 + dilate操作：</h5><p>红框为gt框，蓝框为shrink框，绿框为dilate框</p><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/18.png" style="zoom: 67%;"><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/24.png" style="zoom: 50%;"><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 和shrink_map中的公式一样</span><br>distance = polygon_shape.area * (<span class="hljs-number">1</span> - np.power(self.shrink_ratio, <span class="hljs-number">2</span>)) / polygon_shape.length<br>subject = [<span class="hljs-built_in">tuple</span>(l) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> polygon]<br>padding = pyclipper.PyclipperOffset()<br>padding.AddPath(subject, pyclipper.JT_ROUND,<br>                pyclipper.ET_CLOSEDPOLYGON)<br><br><span class="hljs-comment"># 传入正的distance，即膨胀操作，膨胀后得到的是ppt40页中的绿色框</span><br>padded_polygon = np.array(padding.Execute(distance)[<span class="hljs-number">0</span>])<br></code></pre></div></td></tr></table></figure><img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/25.png" style="zoom: 80%;"><p>  处理后的Distance map       <img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/26.png" style="zoom: 80%;"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 这样一来，在绿框中，绿框到蓝框边的所有区域的点在distance_map中取值为0</span><br><span class="hljs-comment"># 蓝框内的所有点在distance_map中取值为1</span><br>distance_map[i] = np.clip(absolute_distance / distance, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <br><span class="hljs-comment"># 1 - distance_map 其实算是一个将distance_map内的每个点的值的取反的操作。    </span><br><span class="hljs-comment"># 这里的canvas可以看作gt图，下面的操作，其实就是根据上面求出点的distance_map图中的值</span><br><span class="hljs-comment"># 对canvas进行一个填充，填充的结果图在ppt46页左下角的gt图，</span><br><span class="hljs-comment"># gt图中很大区域是灰色的原因是因为前面初始化gt图时，将里面的点的值设为了0-1之间，所以才为灰色</span><br>canvas[ymin_valid:ymax_valid + <span class="hljs-number">1</span>, xmin_valid:xmax_valid + <span class="hljs-number">1</span>] = np.fmax(<br>    <span class="hljs-number">1</span> - distance_map[<br>        ymin_valid - ymin:ymax_valid - ymax + height,<br>        xmin_valid - xmin:xmax_valid - xmax + width],<br>    canvas[ymin_valid:ymax_valid + <span class="hljs-number">1</span>, xmin_valid:xmax_valid + <span class="hljs-number">1</span>])<br></code></pre></div></td></tr></table></figure><h4 id="两个map的计算"><a href="#两个map的计算" class="headerlink" title="两个map的计算"></a>两个map的计算</h4><p>shrink_map 和 dilate_map的一个计算<img src="/2021/07/28/DBNet-%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90-%E5%AE%9E%E8%B7%B5%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BF%90%E8%A1%8C/23.png" style="zoom: 50%;"></p>]]></content>
    
    
    <categories>
      
      <category>Pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OCR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java连接mysql8.0</title>
    <link href="/2021/07/23/Java%E8%BF%9E%E6%8E%A5mysql8-0/"/>
    <url>/2021/07/23/Java%E8%BF%9E%E6%8E%A5mysql8-0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>具体参考：<a href="https://blog.csdn.net/issunmingzhi/article/details/103509508">(21条消息) idea上利用JDBC连接MYSQL数据库（8.0版本）_冢狐的私人空间-CSDN博客_idea连接mysql8.0</a></p><p>这个是需要导入IDEA的一个jar文件，java用该文件来连接mysql8.0数据库</p><p>可以在该网站中搜索对应MySQL8.0.23版本的jar，当然也可以找其他文件</p><p><a href="https://mvnrepository.com/">Maven Repository: Search/Browse/Explore (mvnrepository.com)</a></p><p>我直接将该版本的jar附上百度网盘链接：</p><p><a href="https://pan.baidu.com/s/1Qy9d5XBQAwSORrLilNOqqg">https://pan.baidu.com/s/1Qy9d5XBQAwSORrLilNOqqg</a><br>提取码：eitv</p><p>在IDEA添加jar就不说了，这里直接上连接所需的代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">t</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Connection con;<br>        <span class="hljs-comment">//jdbc驱动</span><br>        String driver=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;<br>        <span class="hljs-comment">//这里是我的数据库的信息</span><br>        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db_liwangdong?&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>;<br>        String user=<span class="hljs-string">&quot;root&quot;</span>;<br>        String password=<span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//注册JDBC驱动程序</span><br>            Class.forName(driver);<br>            <span class="hljs-comment">//建立连接</span><br>            con = DriverManager.getConnection(url, user, password);<br>            <span class="hljs-comment">//判断连接是否成功</span><br>            <span class="hljs-keyword">if</span> (!con.isClosed()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>            &#125;<br>            Statement statement=con.createStatement();<br>            String sql;<br>            <span class="hljs-comment">//sql语句</span><br>            sql=<span class="hljs-string">&quot;select * from users&quot;</span>;<br>            ResultSet resultSet=statement.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>                String users=resultSet.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>                String pwd=resultSet.getString(<span class="hljs-string">&quot;pwd&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;users:&quot;</span>+users+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;pwd:&quot;</span>+pwd);<br>            &#125;<br>            con.close();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数据库驱动没有安装&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;数据库连接失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>以及数据库的一个配置</p><p><img src="/2021/07/23/Java%E8%BF%9E%E6%8E%A5mysql8-0/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyX实例</title>
    <link href="/2021/07/16/EasyX%E5%AE%9E%E4%BE%8B/"/>
    <url>/2021/07/16/EasyX%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="EasyX实例"><a href="#EasyX实例" class="headerlink" title="EasyX实例"></a>EasyX实例</h2><p>先放代码，讲解后面再来填坑hh</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;graphics.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;mmsystem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;winmm.lib&quot;</span>)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//在main函数的while(1)语句中有5个函数，5个bool类型分别控制显示5个页面</span><br><span class="hljs-keyword">bool</span> start = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">bool</span> intro = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">bool</span> ask = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">bool</span> show = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">bool</span> algo = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//判断是否已选择了当前所在地</span><br><span class="hljs-keyword">bool</span> first = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//记录当前所在地，目的地</span><br><span class="hljs-keyword">int</span> now;<br><span class="hljs-keyword">int</span> to;<br><br><span class="hljs-comment">//记录将要展示的景点编号</span><br><span class="hljs-keyword">int</span> point;<br><br><span class="hljs-comment">//歌曲播放和暂停</span><br><span class="hljs-keyword">int</span> play_or_not = <span class="hljs-number">0</span>; <span class="hljs-comment">//每次点击播放按钮时自动+1，为奇数时暂停播放，为偶数时播放音乐</span><br><br><span class="hljs-comment">//景点结构体数组</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Scenic_Spot</span>&#123;</span><br><span class="hljs-comment">//outtextxy中只支持char类型的，string类型的不能用</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>]; <span class="hljs-comment">//名字</span><br><span class="hljs-keyword">char</span> rec[<span class="hljs-number">100</span>]; <span class="hljs-comment">//简介</span><br><span class="hljs-keyword">char</span> imgpath[<span class="hljs-number">20</span>]; <span class="hljs-comment">//可以在介绍景点信息时使用，但是有点卡，所以暂时</span><br>&#125; Dest;<br><span class="hljs-comment">//用结构体数组来存景点的信息</span><br>Dest dest[<span class="hljs-number">15</span>];<br><br><span class="hljs-comment">//相邻两景点的边结构体数组</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">E</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> value;<br><span class="hljs-comment">//char* p;</span><br>&#125; Edge;<br>Edge e[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>];<br><br><span class="hljs-comment">//选项框结构体数组</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Option_box</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">int</span> left;<br><span class="hljs-keyword">int</span> top;<br><span class="hljs-keyword">int</span> right;<br><span class="hljs-keyword">int</span> down;<br>&#125; OPb;<br><span class="hljs-comment">//用结构体数组来存选项框的四个坐标信息</span><br>OPb  opb[<span class="hljs-number">15</span>];<br><br><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//初始化名称</span><br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">0</span>].name, <span class="hljs-string">&quot;汇学堂&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">0</span>].rec, <span class="hljs-string">&quot;各种重大表演活动，报告会，很新很舒适&quot;</span>);<br><span class="hljs-comment">//向char数组name中直接写入字符串</span><br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">1</span>].name, <span class="hljs-string">&quot;知行书院&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">1</span>].rec, <span class="hljs-string">&quot;没去过，应该是个书院&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">2</span>].name, <span class="hljs-string">&quot;雕塑园&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">2</span>].rec, <span class="hljs-string">&quot;好多雕塑，很好看&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">3</span>].name, <span class="hljs-string">&quot;大学生活动中心&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">3</span>].rec, <span class="hljs-string">&quot;可以弹琴，一二楼很凉快，三楼很热，蚊子多&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">4</span>].name, <span class="hljs-string">&quot;第六教学楼&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">4</span>].rec, <span class="hljs-string">&quot;很舒服的学习环境，就是有些小教室蚊子多&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">5</span>].name, <span class="hljs-string">&quot;大礼堂&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">5</span>].rec, <span class="hljs-string">&quot;能容纳很多人，形势政策都在那上，但环境不是很好&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">6</span>].name, <span class="hljs-string">&quot;碧云湖&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">6</span>].rec, <span class="hljs-string">&quot;没去过，应该是个湖&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">7</span>].name, <span class="hljs-string">&quot;图书馆&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">7</span>].rec, <span class="hljs-string">&quot;想要的书都找得到&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">8</span>].name, <span class="hljs-string">&quot;镜湖&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">8</span>].rec, <span class="hljs-string">&quot;在西校园，荷花很好看&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">9</span>].name, <span class="hljs-string">&quot;计电学院&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">9</span>].rec, <span class="hljs-string">&quot;yyds&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">10</span>].name, <span class="hljs-string">&quot;外国语学院&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">10</span>].rec, <span class="hljs-string">&quot;没去过，应该是个学院&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">11</span>].name, <span class="hljs-string">&quot;邵逸夫楼&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">11</span>].rec, <span class="hljs-string">&quot;没去过，应该是个楼&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">12</span>].name, <span class="hljs-string">&quot;西体育馆&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">12</span>].rec, <span class="hljs-string">&quot;羽毛球上课的地方&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">13</span>].name, <span class="hljs-string">&quot;东体育馆&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">13</span>].rec, <span class="hljs-string">&quot;上台球课的时候去过&quot;</span>);<br><span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">14</span>].name, <span class="hljs-string">&quot;西26栋&quot;</span>), <span class="hljs-built_in">strcat_s</span>(dest[<span class="hljs-number">14</span>].rec, <span class="hljs-string">&quot;快跑！&quot;</span>);<br><br><span class="hljs-comment">//边权重的初始化</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">15</span>; j++)<br>e[i][j].value = <span class="hljs-number">0</span>;<br>e[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>].value = <span class="hljs-number">8</span>, e[<span class="hljs-number">1</span>][<span class="hljs-number">6</span>].value = <span class="hljs-number">21</span>, e[<span class="hljs-number">1</span>][<span class="hljs-number">9</span>].value = <span class="hljs-number">6</span>;<br>e[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>].value = <span class="hljs-number">8</span>, e[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>].value = <span class="hljs-number">13</span>, e[<span class="hljs-number">2</span>][<span class="hljs-number">9</span>].value = <span class="hljs-number">4</span>, e[<span class="hljs-number">2</span>][<span class="hljs-number">10</span>].value = <span class="hljs-number">5</span>;<br>e[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">3</span>][<span class="hljs-number">11</span>].value = <span class="hljs-number">11</span>, e[<span class="hljs-number">3</span>][<span class="hljs-number">15</span>].value = <span class="hljs-number">25</span>;<br>e[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>].value = <span class="hljs-number">3</span>, e[<span class="hljs-number">4</span>][<span class="hljs-number">7</span>].value = <span class="hljs-number">18</span>, e[<span class="hljs-number">4</span>][<span class="hljs-number">15</span>].value = <span class="hljs-number">14</span>;<br>e[<span class="hljs-number">5</span>][<span class="hljs-number">2</span>].value = <span class="hljs-number">13</span>, e[<span class="hljs-number">5</span>][<span class="hljs-number">4</span>].value = <span class="hljs-number">3</span>, e[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">5</span>][<span class="hljs-number">13</span>].value = <span class="hljs-number">6</span>;<br>e[<span class="hljs-number">6</span>][<span class="hljs-number">1</span>].value = <span class="hljs-number">21</span>, e[<span class="hljs-number">6</span>][<span class="hljs-number">6</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">6</span>][<span class="hljs-number">12</span>].value = <span class="hljs-number">5</span>, e[<span class="hljs-number">6</span>][<span class="hljs-number">14</span>].value = <span class="hljs-number">9</span>;<br>e[<span class="hljs-number">7</span>][<span class="hljs-number">4</span>].value = <span class="hljs-number">18</span>, e[<span class="hljs-number">7</span>][<span class="hljs-number">7</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">7</span>][<span class="hljs-number">10</span>].value = <span class="hljs-number">6</span>;<br>e[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">8</span>][<span class="hljs-number">10</span>].value = <span class="hljs-number">15</span>;<br>e[<span class="hljs-number">9</span>][<span class="hljs-number">1</span>].value = <span class="hljs-number">6</span>, e[<span class="hljs-number">9</span>][<span class="hljs-number">2</span>].value = <span class="hljs-number">4</span>, e[<span class="hljs-number">9</span>][<span class="hljs-number">9</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">9</span>][<span class="hljs-number">12</span>].value = <span class="hljs-number">3</span>, e[<span class="hljs-number">9</span>][<span class="hljs-number">13</span>].value = <span class="hljs-number">1</span>;<br>e[<span class="hljs-number">10</span>][<span class="hljs-number">2</span>].value = <span class="hljs-number">5</span>, e[<span class="hljs-number">10</span>][<span class="hljs-number">7</span>].value = <span class="hljs-number">6</span>, e[<span class="hljs-number">10</span>][<span class="hljs-number">8</span>].value = <span class="hljs-number">15</span>, e[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>].value = <span class="hljs-number">0</span>, e[<span class="hljs-number">10</span>][<span class="hljs-number">11</span>].value = <span class="hljs-number">4</span>, e[<span class="hljs-number">10</span>][<span class="hljs-number">14</span>].value = <span class="hljs-number">6</span>;<br>e[<span class="hljs-number">11</span>][<span class="hljs-number">3</span>].value = <span class="hljs-number">11</span>, e[<span class="hljs-number">11</span>][<span class="hljs-number">10</span>].value = <span class="hljs-number">4</span>, e[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>].value = <span class="hljs-number">0</span>;<br>e[<span class="hljs-number">12</span>][<span class="hljs-number">6</span>].value = <span class="hljs-number">5</span>, e[<span class="hljs-number">12</span>][<span class="hljs-number">9</span>].value = <span class="hljs-number">3</span>, e[<span class="hljs-number">12</span>][<span class="hljs-number">12</span>].value = <span class="hljs-number">0</span>;<br>e[<span class="hljs-number">13</span>][<span class="hljs-number">5</span>].value = <span class="hljs-number">6</span>, e[<span class="hljs-number">13</span>][<span class="hljs-number">9</span>].value = <span class="hljs-number">1</span>, e[<span class="hljs-number">13</span>][<span class="hljs-number">13</span>].value = <span class="hljs-number">0</span>;<br>e[<span class="hljs-number">14</span>][<span class="hljs-number">6</span>].value = <span class="hljs-number">9</span>, e[<span class="hljs-number">14</span>][<span class="hljs-number">10</span>].value = <span class="hljs-number">6</span>, e[<span class="hljs-number">14</span>][<span class="hljs-number">14</span>].value = <span class="hljs-number">0</span>;<br>e[<span class="hljs-number">15</span>][<span class="hljs-number">3</span>].value = <span class="hljs-number">25</span>, e[<span class="hljs-number">15</span>][<span class="hljs-number">4</span>].value = <span class="hljs-number">14</span>, e[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>].value = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//基于Dijkstra算法找出以s为起点，v为终点的单源最短路径</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Algo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//路径查询结果背景</span><br>IMAGE img;<br><span class="hljs-built_in">loadimage</span>(&amp;img, _T(<span class="hljs-string">&quot;./5.png&quot;</span>), <span class="hljs-number">640</span>, <span class="hljs-number">480</span>);<br><span class="hljs-built_in">putimage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;img);<br><br><span class="hljs-comment">//初始化各变量</span><br><span class="hljs-keyword">int</span> dist[<span class="hljs-number">20</span>]; <span class="hljs-comment">//记录每个节点距离起点的距离</span><br><span class="hljs-keyword">int</span> pre[<span class="hljs-number">20</span>]; <span class="hljs-comment">// 记录该点由哪个路径可达</span><br><span class="hljs-keyword">bool</span> view[<span class="hljs-number">20</span>]; <span class="hljs-comment">//True表示已经确定最短路</span><br><span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> path[<span class="hljs-number">20</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++)<br>&#123;<br>dist[i] = <span class="hljs-number">99999</span>; <span class="hljs-comment">//每个点到s点的距离设为99999</span><br>pre[i] = <span class="hljs-number">-1</span>; <span class="hljs-comment">//每个点的前一个点初始化为-1</span><br>view[i] = <span class="hljs-literal">false</span>;<br>&#125;<br>dist[s] = <span class="hljs-number">0</span>; <span class="hljs-comment">//起点距离自己的距离为零 und!</span><br>pre[s] = s;<br><br><span class="hljs-comment">//迭代n次，每次可以确定一个点到起点的最短路</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> t = <span class="hljs-number">-1</span>; <span class="hljs-comment">//初始化标记</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">15</span>; j++) &#123;<br><span class="hljs-comment">//不在s集合(!view[j])，并且&amp;&amp;</span><br><span class="hljs-comment">//如果没有更新过(t == -1)，则进行更新， 或者发现更短的路径(dist[j] &lt; dist[t])，则进行更新</span><br><span class="hljs-keyword">if</span> (!view[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[j] &lt; dist[t])) &#123;<br>t = j;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//加入到s集合中</span><br>view[t] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//找到了距离最小的点t，并用最小的点t去更新其他的点到起点的距离</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">15</span>; j++)<br>&#123;<br><span class="hljs-comment">// dist[j] = min(dist[j], dist[t] + edges[t][j].value);</span><br><span class="hljs-keyword">if</span> (e[t][j].value != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (dist[t] + e[t][j].value &lt; dist[j]) <span class="hljs-comment">//如果刚找到的点能够更新该点的距离</span><br>&#123;<br>dist[j] = dist[t] + e[t][j].value; <span class="hljs-comment">//更新距离</span><br>pre[j] = t; <span class="hljs-comment">//更新路径</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = v; pre[i] != i; i = pre[i])<br>&#123;<br>path[length++] = i;<br>&#125;<br>path[length] = s;<br><br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">0</span>, <span class="hljs-number">205</span>, <span class="hljs-number">0</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>, _T(<span class="hljs-string">&quot;已为您找到最短路径：&quot;</span>));<br><br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">0</span>, <span class="hljs-number">205</span>, <span class="hljs-number">0</span>));<br><span class="hljs-keyword">int</span> h = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = length; i &gt;= <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">300</span>, h, dest[path[i] - <span class="hljs-number">1</span>].name);<br>h += <span class="hljs-number">40</span>;<br>&#125;<br><br><span class="hljs-keyword">char</span> tmp[<span class="hljs-number">5</span>];<br><span class="hljs-built_in">snprintf</span>(tmp, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(tmp), <span class="hljs-string">&quot;%d&quot;</span> ,dist[v]);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">300</span>, h, _T(<span class="hljs-string">&quot;共需行走：&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">400</span>, h, tmp);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">450</span>, h, _T(<span class="hljs-string">&quot;(公里)&quot;</span>));<br><span class="hljs-comment">//返回按钮</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">520</span>, <span class="hljs-number">410</span>, <span class="hljs-number">620</span>, <span class="hljs-number">470</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">80</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><br><span class="hljs-comment">//点击返回</span><br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">520</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">620</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">410</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">470</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">45</span>, <span class="hljs-number">82</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br>ask = <span class="hljs-literal">true</span>;<br>algo = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//展示景点</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//展示背景</span><br>IMAGE img1,img2;<br><span class="hljs-built_in">loadimage</span>(&amp;img1, _T(<span class="hljs-string">&quot;./4.png&quot;</span>), <span class="hljs-number">640</span>, <span class="hljs-number">480</span>);<br><span class="hljs-built_in">putimage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;img1);<br><br><span class="hljs-comment">//景点图片，放了太卡，暂时先不放了</span><br><span class="hljs-comment">//loadimage(&amp;img2, dest[point].imgpath, 400, 300);</span><br><span class="hljs-comment">//putimage(200, 100, &amp;img2);</span><br><br><span class="hljs-comment">//简介内容</span><br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">238</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">50</span>, <span class="hljs-number">20</span>, dest[point].name);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">72</span>, <span class="hljs-number">118</span>, <span class="hljs-number">255</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">50</span>, <span class="hljs-number">70</span>, _T(<span class="hljs-string">&quot;简介：&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">90</span>, <span class="hljs-number">70</span>, dest[point].rec);<br><br><span class="hljs-comment">//返回按钮</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">520</span>, <span class="hljs-number">410</span>, <span class="hljs-number">620</span>, <span class="hljs-number">470</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">80</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><br><span class="hljs-comment">//点击返回</span><br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">520</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">620</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">410</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">470</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">45</span>, <span class="hljs-number">82</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br>show = <span class="hljs-literal">false</span>;<br>intro = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//跳出弹窗询问是否关闭</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">end</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HWND hnd = <span class="hljs-built_in">GetHWnd</span>();<br><span class="hljs-keyword">int</span> isok = <span class="hljs-built_in">MessageBox</span>(hnd, <span class="hljs-string">&quot;您确定要退出校园导航吗&quot;</span>, <span class="hljs-string">&quot;询问&quot;</span>, MB_OKCANCEL); <span class="hljs-comment">//弹窗</span><br><span class="hljs-keyword">if</span> (isok == IDOK)<br><span class="hljs-built_in">closegraph</span>();<br>&#125;<br><br><span class="hljs-comment">//景点选择</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">127</span>, <span class="hljs-number">255</span>, <span class="hljs-number">212</span>));<br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (msg.x &gt;= opb[i].left &amp;&amp; msg.x &lt;= opb[i].right &amp;&amp; msg.y &gt;= opb[i].top &amp;&amp; msg.y &lt;= opb[i].down)<br>&#123;<br><span class="hljs-built_in">fillrectangle</span>(opb[i].left+<span class="hljs-number">5</span>, opb[i].top+<span class="hljs-number">5</span>, opb[i].right<span class="hljs-number">-5</span>, opb[i].down<span class="hljs-number">-5</span>);<br><span class="hljs-built_in">outtextxy</span>(opb[i].left + <span class="hljs-number">10</span>, opb[i].top + <span class="hljs-number">5</span>, dest[i].name);<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN &amp;&amp; intro == <span class="hljs-literal">true</span>) <span class="hljs-comment">//因为有两个函数共同调用select，所以要判断一下当前处于的是哪一个页面</span><br>&#123;<br>point = i;<br>show = <span class="hljs-literal">true</span>; <span class="hljs-comment">//在main函数中开启Show界面</span><br>intro = <span class="hljs-literal">false</span>; <span class="hljs-comment">//在main函数中关闭intro界面</span><br><span class="hljs-built_in">Show</span>();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN &amp;&amp; ask == <span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (first == <span class="hljs-literal">true</span>)<br>&#123;<br>now = i + <span class="hljs-number">1</span>; <span class="hljs-comment">//迎合算法中的景点编号(我的是从0开始，家弘的是从1开始)</span><br>first = <span class="hljs-literal">false</span>; <span class="hljs-comment">//说明第一个点已选择 </span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">false</span>)<br>&#123;<br>to = i + <span class="hljs-number">1</span>;<br>ask = <span class="hljs-literal">false</span>;<br>algo = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//跳转到algo页面，同时main函数中的Algo()通过全局变量now,to来接收两点编号</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//景点绘画</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//大方框线(框内包含所有的景点名)</span><br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">58</span>, <span class="hljs-number">95</span>, <span class="hljs-number">205</span>));<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">200</span>, <span class="hljs-number">50</span>, <span class="hljs-number">630</span>, <span class="hljs-number">400</span>);<br><br><span class="hljs-keyword">int</span> top = <span class="hljs-number">60</span>, down = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>; <span class="hljs-comment">//景点编号</span><br><span class="hljs-comment">//数字选项绘画(五行三列)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-keyword">int</span> left = <span class="hljs-number">210</span>, right = <span class="hljs-number">330</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br><span class="hljs-built_in">rectangle</span>(left, top, right, down);<br><span class="hljs-comment">//在绘画景点选项框的同时，记录这些框的四个坐标</span><br>opb[index].left = left;<br>opb[index].top = top;<br>opb[index].right = right;<br>opb[index].down = down;<br><span class="hljs-comment">//cout &lt;&lt; left &lt;&lt; &quot; &quot; &lt;&lt; top &lt;&lt; &quot; &quot; &lt;&lt; right &lt;&lt; &quot; &quot; &lt;&lt; down &lt;&lt; endl;</span><br><span class="hljs-built_in">rectangle</span>(left + <span class="hljs-number">5</span>, top + <span class="hljs-number">5</span>, right - <span class="hljs-number">5</span>, down - <span class="hljs-number">5</span>);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">140</span>, <span class="hljs-number">0</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">20</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(left + <span class="hljs-number">10</span>, top + <span class="hljs-number">5</span>, dest[index].name);<br>index++;<br><span class="hljs-keyword">int</span> width = <span class="hljs-number">120</span>;<br>left = right + <span class="hljs-number">20</span>, right = left + width;<br>&#125;<br><span class="hljs-keyword">int</span> height = <span class="hljs-number">40</span>;<br>top = down + <span class="hljs-number">30</span>, down = top + height;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//景点介绍界面</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Introduce</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//咨询背景</span><br>IMAGE img;<br><span class="hljs-built_in">loadimage</span>(&amp;img, _T(<span class="hljs-string">&quot;./2.png&quot;</span>), <span class="hljs-number">640</span>, <span class="hljs-number">480</span>);<br><span class="hljs-built_in">putimage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;img);<br><br><span class="hljs-comment">//当前标题</span><br><span class="hljs-built_in">setbkmode</span>(TRANSPARENT);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">240</span>, <span class="hljs-number">86</span>, <span class="hljs-number">84</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">270</span>, <span class="hljs-number">20</span>, _T(<span class="hljs-string">&quot;请点击您想咨询的景点信息&quot;</span>));<br><br><span class="hljs-comment">//大方框线及其内容</span><br><span class="hljs-built_in">Draw</span>();<br><br><span class="hljs-comment">//返回按钮</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">520</span>, <span class="hljs-number">410</span>, <span class="hljs-number">620</span>, <span class="hljs-number">470</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">80</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><br><span class="hljs-comment">//选择景点，并点击查询</span><br><span class="hljs-built_in">select</span>();<br><br><span class="hljs-comment">//鼠标点击返回</span><br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">520</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">620</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">410</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">470</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">45</span>, <span class="hljs-number">82</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br>start = <span class="hljs-literal">true</span>;<br>intro = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//最短路径界面</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ask</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//路径查询背景</span><br>IMAGE img;<br><span class="hljs-built_in">loadimage</span>(&amp;img, _T(<span class="hljs-string">&quot;./3.png&quot;</span>), <span class="hljs-number">640</span>, <span class="hljs-number">480</span>);<br><span class="hljs-built_in">putimage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;img);<br><br><span class="hljs-comment">//当前标题</span><br><span class="hljs-built_in">setbkmode</span>(TRANSPARENT);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">240</span>, <span class="hljs-number">86</span>, <span class="hljs-number">84</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">360</span>, <span class="hljs-number">20</span>, _T(<span class="hljs-string">&quot;景点清单&quot;</span>));<br><br><span class="hljs-comment">//选择提示</span><br><span class="hljs-keyword">if</span> (first == <span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">99</span>, <span class="hljs-number">71</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;请选择您当前所在的位置 :)&quot;</span>));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(first == <span class="hljs-literal">false</span>)<br>&#123;<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">99</span>, <span class="hljs-number">71</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;当前位置：&quot;</span>));<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">138</span>, <span class="hljs-number">43</span>, <span class="hljs-number">226</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">100</span>, <span class="hljs-number">0</span>, dest[now<span class="hljs-number">-1</span>].name); <span class="hljs-comment">//为了和家弘的景点编号对应</span><br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">99</span>, <span class="hljs-number">71</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>, _T(<span class="hljs-string">&quot;请选择您的目的地&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">//大方框线及其内容</span><br><span class="hljs-built_in">Draw</span>();<br><br><span class="hljs-comment">//选择</span><br><span class="hljs-built_in">select</span>();<br><br><span class="hljs-comment">//返回按钮</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">520</span>, <span class="hljs-number">410</span>, <span class="hljs-number">620</span>, <span class="hljs-number">470</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">80</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><br><span class="hljs-comment">//点击返回</span><br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">520</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">620</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">410</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">470</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>, <span class="hljs-number">45</span>, <span class="hljs-number">82</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">525</span>, <span class="hljs-number">415</span>, <span class="hljs-number">615</span>, <span class="hljs-number">465</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">548</span>, <span class="hljs-number">418</span>, _T(<span class="hljs-string">&quot;返回&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br>start = <span class="hljs-literal">true</span>;<br>ask = <span class="hljs-literal">false</span>;<br>first = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//主菜单</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//菜单背景</span><br>IMAGE img;<br><span class="hljs-built_in">loadimage</span>(&amp;img, _T(<span class="hljs-string">&quot;./1.png&quot;</span>), <span class="hljs-number">640</span>, <span class="hljs-number">480</span>);<br><span class="hljs-built_in">putimage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;img);<br><span class="hljs-comment">//标题</span><br><span class="hljs-built_in">setbkmode</span>(TRANSPARENT);<br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">240</span>,<span class="hljs-number">86</span>,<span class="hljs-number">84</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">50</span>, <span class="hljs-number">0</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-comment">//wchar_t wt[] = L&quot;广西大学校园导游咨询&quot;;</span><br><span class="hljs-comment">//outtextxy(200, 20, wt);</span><br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">200</span>, <span class="hljs-number">20</span>, _T(<span class="hljs-string">&quot;广西大学校园导游咨询&quot;</span>));<br><br><span class="hljs-comment">//选项方框</span><br><span class="hljs-built_in">setlinecolor</span>(BLACK);<br><br><span class="hljs-comment">//退出</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">500</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">360</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">505</span>, <span class="hljs-number">305</span>, <span class="hljs-number">595</span>, <span class="hljs-number">355</span>);<br><br><span class="hljs-comment">//景点介绍</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">50</span>, <span class="hljs-number">300</span>, <span class="hljs-number">150</span>, <span class="hljs-number">360</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">55</span>, <span class="hljs-number">305</span>, <span class="hljs-number">145</span>, <span class="hljs-number">355</span>);<br><br><span class="hljs-comment">//路径查询</span><br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">280</span>, <span class="hljs-number">300</span>, <span class="hljs-number">380</span>, <span class="hljs-number">360</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">285</span>, <span class="hljs-number">305</span>, <span class="hljs-number">375</span>, <span class="hljs-number">355</span>);<br><br><span class="hljs-comment">//方框内容</span><br><span class="hljs-built_in">settextcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">80</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>));<br><span class="hljs-built_in">settextstyle</span>(<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, _T(<span class="hljs-string">&quot;微软雅黑&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">528</span>, <span class="hljs-number">308</span>, _T(<span class="hljs-string">&quot;退出&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">58</span>, <span class="hljs-number">308</span>, _T(<span class="hljs-string">&quot;景点咨询&quot;</span>));<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">286</span>, <span class="hljs-number">308</span>, _T(<span class="hljs-string">&quot;路径查询&quot;</span>));<br><br><span class="hljs-comment">//BGM播放窗口</span><br>POINT pts[] = &#123; &#123;<span class="hljs-number">300</span>,<span class="hljs-number">430</span>&#125;,&#123;<span class="hljs-number">320</span>,<span class="hljs-number">445</span>&#125;,&#123;<span class="hljs-number">300</span>,<span class="hljs-number">460</span>&#125; &#125;;<br><span class="hljs-built_in">polygon</span>(pts, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">rectangle</span>(<span class="hljs-number">290</span>, <span class="hljs-number">420</span>, <span class="hljs-number">330</span>, <span class="hljs-number">470</span>);<br><br><br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><br><span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">500</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">595</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">300</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">360</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">45</span>,<span class="hljs-number">82</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">505</span>, <span class="hljs-number">305</span>, <span class="hljs-number">595</span>, <span class="hljs-number">355</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">528</span>, <span class="hljs-number">308</span>, _T(<span class="hljs-string">&quot;退出&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br><span class="hljs-built_in">mciSendString</span>(<span class="hljs-string">&quot;close bgm&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">end</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">50</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">150</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">300</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">360</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">33</span>, <span class="hljs-number">167</span>, <span class="hljs-number">171</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">55</span>, <span class="hljs-number">305</span>, <span class="hljs-number">145</span>, <span class="hljs-number">355</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">58</span>, <span class="hljs-number">308</span>, _T(<span class="hljs-string">&quot;景点咨询&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br>start = <span class="hljs-literal">false</span>;<br>intro = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (msg.x &gt;= <span class="hljs-number">280</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">380</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">300</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">360</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">254</span>, <span class="hljs-number">241</span>, <span class="hljs-number">67</span>));<br><span class="hljs-built_in">fillrectangle</span>(<span class="hljs-number">285</span>, <span class="hljs-number">305</span>, <span class="hljs-number">375</span>, <span class="hljs-number">355</span>);<br><span class="hljs-built_in">outtextxy</span>(<span class="hljs-number">286</span>, <span class="hljs-number">308</span>, _T(<span class="hljs-string">&quot;路径查询&quot;</span>));<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br>start = <span class="hljs-literal">false</span>;<br>ask = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(msg.x &gt;= <span class="hljs-number">290</span> &amp;&amp; msg.x &lt;= <span class="hljs-number">330</span> &amp;&amp; msg.y &gt;= <span class="hljs-number">420</span> &amp;&amp; msg.y &lt;= <span class="hljs-number">470</span>)<br>&#123;<br><span class="hljs-built_in">setfillcolor</span>(<span class="hljs-built_in">RGB</span>(<span class="hljs-number">0</span>, <span class="hljs-number">204</span>, <span class="hljs-number">221</span>));<br><span class="hljs-built_in">fillpolygon</span>(pts, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br><span class="hljs-keyword">if</span> (play_or_not % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)  <span class="hljs-built_in">mciSendString</span>(<span class="hljs-string">&quot;play bgm&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (play_or_not % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)  <span class="hljs-built_in">mciSendString</span>(<span class="hljs-string">&quot;pause bgm&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>play_or_not++;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">initgraph</span>(<span class="hljs-number">640</span>, <span class="hljs-number">480</span>, EW_SHOWCONSOLE);<br>HWND hnd = <span class="hljs-built_in">GetHWnd</span>();<br><span class="hljs-built_in">SetWindowText</span>(hnd, <span class="hljs-string">&quot;活着就是为了樱岛麻衣&quot;</span>);<br><span class="hljs-built_in">mciSendString</span>(<span class="hljs-string">&quot;open ./1.wav alias bgm&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">BeginBatchDraw</span>();<br><span class="hljs-built_in">cleardevice</span>();<br><span class="hljs-comment">//开始菜单逻辑顺序</span><br><span class="hljs-keyword">if</span> (start)<br><span class="hljs-built_in">Menu</span>();<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (intro)<br><span class="hljs-built_in">Introduce</span>();<br><span class="hljs-keyword">if</span> (ask)<br><span class="hljs-built_in">Ask</span>();<br><span class="hljs-keyword">if</span> (show)<br><span class="hljs-built_in">Show</span>();<br><span class="hljs-keyword">if</span> (algo)<br><span class="hljs-built_in">Algo</span>(now, to);<br>&#125;<br><span class="hljs-built_in">EndBatchDraw</span>();<br>&#125;<br>_getch();<br><span class="hljs-built_in">closegraph</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>小游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的线性回归模型</title>
    <link href="/2021/07/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/07/11/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="从零开始的线性回归模型"><a href="#从零开始的线性回归模型" class="headerlink" title="从零开始的线性回归模型"></a>从零开始的线性回归模型</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment">## 线性回归方程</span><br><span class="hljs-comment"># y = Xw + b + c</span><br><span class="hljs-comment"># X为1000x2的矩阵</span><br><span class="hljs-comment"># w = [2.-3.4]T</span><br><span class="hljs-comment"># b = 4.2</span><br><span class="hljs-comment"># c是为捕获特征和标签时的潜在观测误差，这里我们认为标准假设成立，即c服从均值为0的正态分布</span><br><span class="hljs-comment"># 为简化问题，标准差设为0.01</span><br><span class="hljs-comment"># torch.normal(mean,std,size=)：返回一个从单独的正态分布中提取的随机数张量，这些正态分布的平均值和标准差是给定的。</span><br><span class="hljs-comment"># mean均值，std标准差，表现形式为张量，size是返回的张量的大小(如果张量是矩阵nxm的话，size=(n,m))</span><br><span class="hljs-comment"># torch.matmul()类似于torch.mm()矩阵-矩阵乘法</span><br><br><span class="hljs-comment">## 生成给定了真实权重w和真实偏移值b的函数y = Xw + b + c的数据集</span><br><span class="hljs-comment"># 说明该数据集是真实数据,是一个训练集train set</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">synthetic_data</span>(<span class="hljs-params">w,b,num_examples</span>):</span><br>    X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (num_examples, <span class="hljs-built_in">len</span>(w)))<br>    y = torch.matmul(X,w) + b<br>    c = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, y.shape)<br>    y += c<br>    <span class="hljs-keyword">return</span> X, y.reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br><span class="hljs-comment"># print(features.shape, labels.shape)</span><br><span class="hljs-comment"># torch.Size([1000, 2]) torch.Size([1000, 1])</span><br><span class="hljs-comment"># features有1000行，每行包含一个二维数据样本(说明有两个特征值)，labels有1000行，每行包含一维标签值(一个标量)</span><br><br><span class="hljs-comment">#用散点图来观察features的第二列(第二个特征)与labels的线性关系</span><br><span class="hljs-comment"># plt.scatter(features[:, 1], labels)</span><br><span class="hljs-comment"># plt.show()</span><br><br><span class="hljs-comment">## 小批量随机读取数据集</span><br><span class="hljs-comment"># 该函数能打乱数据集中的样本，并以小批量的方式获取数据</span><br><span class="hljs-comment"># data_iter函数，用来接收批量大小，特征矩阵，标签向量作为输入，生成大小为batch_size的小批量，每个小批量包含一组特征和标签</span><br><span class="hljs-comment"># 最终目的是为了:小批量随机梯度下降</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data_iter</span>(<span class="hljs-params">batch_size,features,labels</span>):</span><br>    num_examples = <span class="hljs-built_in">len</span>(features) <span class="hljs-comment"># len(features) == 1000</span><br>    indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(num_examples)) <span class="hljs-comment"># indices是一个list,里面包含0-1000个数字</span><br>    random.shuffle(indices) <span class="hljs-comment"># 将indices内的数乱序存放</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num_examples, batch_size):<br>        batch_indices = torch.tensor(indices[i:<span class="hljs-built_in">min</span>(i+batch_size,num_examples)])<br>        <span class="hljs-comment"># min()确保右边界 i+batch_size 不会超出num_examples</span><br>        <span class="hljs-comment"># i从0开始,每次循环 i += batch_size,直到 i 超出num_examples则结束循环</span><br>        <span class="hljs-comment"># 每次取出范围为 [i,min(i+batch_size, num_examples)]内的数,</span><br>        <span class="hljs-comment"># 并作为向量(一维张量torch.tensor)形式,赋给batch_indices</span><br>        <span class="hljs-keyword">yield</span> features[batch_indices], labels[batch_indices]<br><br><span class="hljs-comment"># batch_size = 10</span><br><span class="hljs-comment"># for X, y in data_iter(batch_size, features, labels):</span><br><span class="hljs-comment">#     print(X,&#x27;\n&#x27;,y)</span><br><span class="hljs-comment">#     break</span><br><br><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"># 上面的部分为(创造数据集)和(定义小批量读取数据集的方法)</span><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"># 接下来为正式的解决问题</span><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------</span><br><br><span class="hljs-comment">## 定义线性回归模型，为了降低难度，这里将噪声c设置为0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">linreg</span>(<span class="hljs-params">X,w,b</span>):</span><br>    <span class="hljs-keyword">return</span> torch.matmul(X,w) + b<br><br><span class="hljs-comment">## 初始化权重w和偏移值b</span><br><span class="hljs-comment"># requires_grad=True,通过自动求导来计算梯度</span><br>w = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), requires_grad=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 从均值0,标准差0.01的正态分布中采样随机数来初始权重</span><br>b = torch.zeros(<span class="hljs-number">1</span>, requires_grad=<span class="hljs-literal">True</span>) <span class="hljs-comment">#初始化为标量0</span><br><br><span class="hljs-comment">## 定义损失函数(使用常见的&quot;平方损失函数&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">squared_loss</span>(<span class="hljs-params">y_hat,y</span>):</span> <span class="hljs-comment"># y_hat是带^号的y，(表示估计值)，而y是数据集中实际的值</span><br>    <span class="hljs-keyword">return</span> (y_hat - y.reshape(y_hat.shape))**<span class="hljs-number">2</span> / <span class="hljs-number">2</span><br><br><span class="hljs-comment">## 定义优化算法(小批量随机梯度下降算法) 在优化算法中使用data_iter()得到的小批量数据集</span><br><span class="hljs-comment"># 该函数接收模型参数集合params,学习速率lr,批量大小batch_size</span><br><span class="hljs-comment"># 小批量随机梯度下降-small batch random gradient descent(SGD)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sgd</span>(<span class="hljs-params">params,lr,batch_size</span>):</span><br>    <span class="hljs-keyword">with</span> torch.no_grad(): <span class="hljs-comment"># 表示张量的计算过程中无需计算梯度</span><br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>            param -= lr * param.grad / batch_size<br>            param.grad.zero_() <span class="hljs-comment">#pytorch会积累梯度,所以每轮循环结束时要清空梯度</span><br><br><span class="hljs-comment"># torch.no_grad</span><br><span class="hljs-comment"># 在该模块下，所有计算得出的tensor的requires_grad都自动设置为false</span><br><span class="hljs-comment"># 即使一个tensor(命名为x)的requires_grad=True，在with torch.no_grad计算下，由x得到的新tensor(命名为w)的</span><br><span class="hljs-comment"># requires_grad也为False，且grad_fn也为None，即不会对w求导</span><br><span class="hljs-comment"># x = torch.randn(10,5,requires_grad=True)</span><br><span class="hljs-comment"># y = torch.randn(10,5,requires_grad=True)</span><br><span class="hljs-comment"># z = torch.randn(10,5,requires_grad=True)</span><br><span class="hljs-comment"># with torch.no_grad():</span><br><span class="hljs-comment">#     w = x + y + z</span><br><span class="hljs-comment">#     print(w.requires_grad) # False</span><br><span class="hljs-comment">#     print(w.grad_fn) # None</span><br><span class="hljs-comment"># print(w.requires_grad) # False</span><br><span class="hljs-comment"># print(w.grad_fn) # None</span><br><br><span class="hljs-comment">## 整体流程</span><br><span class="hljs-comment"># 初始化参数</span><br><span class="hljs-comment"># 重复，直到完成</span><br><span class="hljs-comment"># 读取一小批量训练样本，通过模型来获取一组预测，</span><br><span class="hljs-comment"># 通过预测，计算完损失后，开始反向传播，存储每个参数的梯度，</span><br><span class="hljs-comment"># 最后调用优化算法sgd来更新模型的参数(w,b)</span><br><br><span class="hljs-comment">#------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"># 上面为设定正确的线性回归方程，并根据该方程生成训练集数据，</span><br><span class="hljs-comment"># 构建读取数据方式，构建线性回归模型，损失函数，小批量随机梯度下降优化算法，</span><br><span class="hljs-comment">#-------------------------------------------------------------------------------------------------</span><br><span class="hljs-comment"># 下面实际训练过程</span><br><span class="hljs-comment">#-------------------------------------------------------------------------------------------------</span><br><br>lr = <span class="hljs-number">0.03</span> <span class="hljs-comment"># 学习率</span><br>num_epochs = <span class="hljs-number">3</span> <span class="hljs-comment"># 迭代周期个数</span><br><span class="hljs-comment"># 在每个迭代周期中，我们用data_iter函数遍历整个数据集，并将训练数据集中的所有样本都使用一次(假设样本数能被批量大小整除)</span><br>net = linreg <span class="hljs-comment"># 线性回归模型，也可以说是net(网络)</span><br>loss = squared_loss <span class="hljs-comment"># 损失值</span><br>batch_size = <span class="hljs-number">10</span> <span class="hljs-comment">#设置每个小批量的大小为batch_size</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter(batch_size,features,labels):<br>        l = loss(net(X,w,b),y) <span class="hljs-comment"># 计算求出来的“小批量数据集”的(估计值y_hat)和(实际的y真实值)之间的损失</span><br>        <span class="hljs-comment"># l的形状为(batch_size,1),需要将l的所有元素加和，并一次计算关于[&#x27;w&#x27;,&#x27;b&#x27;]的梯度</span><br>        l.<span class="hljs-built_in">sum</span>().backward()<br>        sgd([w,b],lr,batch_size) <span class="hljs-comment"># 使用参数的梯度来更新梯度</span><br>        <span class="hljs-comment"># 第二个for循环用来得到小批量数据集X,y，并带入参数w,b，求出l损失值，</span><br>        <span class="hljs-comment"># 并通过l.sum.backward来求出参数w,b的梯度</span><br>        <span class="hljs-comment"># 将含梯度的参数w,b带入sgd()算法中，更新得到新的参数w,b</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        train_l = loss(net(features,w,b),labels)<br>        <span class="hljs-comment"># train_l == 计算构造的线性回归模型的(估计值y_hat)与(实际的y真实值)之间的损失，与l不同</span><br>        <span class="hljs-comment"># l是(小批量数据集Xw+b+c)与(小批量y)的损失，</span><br>        <span class="hljs-comment"># train_l是(整体全部数据集featuresw+b)与(全部数据对应的labels）的</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;<span class="hljs-built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;w的估计误差：<span class="hljs-subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b的估计误差：<span class="hljs-subst">&#123;true_b - b&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment">##过程</span><br><span class="hljs-comment"># 1.生成数据集(此步骤在真实情况中一般不需要考虑，数据集是从外部收集得到的)，需要自己构建一个真实的线性回归方程</span><br><span class="hljs-comment"># 生成的数据集由features(x)和labels(y)构成，features是1000x2的矩阵，而labels是1000x1的矩阵(向量)</span><br><span class="hljs-comment"># 2.读取数据(因为使用的优化算法为“小批量随机梯度下降算法(sgd)“，所以需要小批量随机读取数据)</span><br><span class="hljs-comment"># 3.构建线性回归模型y=Xw+b(这里为了简单，将噪声c设置为0)</span><br><span class="hljs-comment"># 4.构建计算平方损失的损失函数(该函数计算&quot;小批量&quot;的结果值l，通过自动求导，可以求出”小批量”的参数[w,b]的梯度</span><br><span class="hljs-comment"># 并将带梯度的参数[w,b]用于优化算法(sgd)中，与计算&quot;featurs&quot;的结果值train_l不同)</span><br><span class="hljs-comment"># 5.构建优化算法”小批量随机梯度下降算法“(sgd)，将带梯度的参数[w,b]，batch_size喂入sgd算法中，从而更新[w,b]参数值</span><br><span class="hljs-comment"># 6.共有三次迭代周期，每个周期内以batch_size使用训练数据集的所有样本(假设样本数能整除批量大小(batch_size))</span><br><span class="hljs-comment"># 每次迭代结束后，计算labels与features之间的损失值train_l,也就是最终的损失值</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django和mysql</title>
    <link href="/2021/07/11/django%E5%92%8Cmysql/"/>
    <url>/2021/07/11/django%E5%92%8Cmysql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先在Navicat Premium中新建连接rem</p><p>在rem中创建一个db_liwangdong数据库，并关闭该数据库</p><p>在dbs虚拟环境中，dbs_code文件下执行</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">django-admin</span> <span class="hljs-string">startproject</span> <span class="hljs-string">connect</span><br><span class="hljs-string">cd</span> <span class="hljs-string">connect</span><br><span class="hljs-string">python</span> <span class="hljs-string">manage.py</span> <span class="hljs-string">startapp</span> <span class="hljs-string">c</span><br></code></pre></div></td></tr></table></figure><p>这样就创建好了django项目</p><p>在小connect文件夹中的</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">__init__.py文件中</span><br><span class="hljs-string">添加</span><br><span class="hljs-string">import</span> <span class="hljs-string">pymysql</span><br><span class="hljs-string">pymysql.install_as_MySQLdb()</span><br><br><span class="hljs-string">settings.py文件中</span><br><span class="hljs-string">INSTALLED_APPS</span> <span class="hljs-string">=</span> [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;c&#x27;</span>, <br>]<br><span class="hljs-string">添加app名称，也就是&#x27;c&#x27;</span><br><span class="hljs-string">同时填写DATABASES中数据库的相关信息</span><br><span class="hljs-string">DATABASES</span> <span class="hljs-string">=</span> &#123;<br>    <span class="hljs-attr">&#x27;default&#x27;:</span> &#123;<br>        <span class="hljs-attr">&#x27;ENGINE&#x27;:</span> <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-attr">&#x27;NAME&#x27;:</span> <span class="hljs-string">&#x27;db_liwangdong&#x27;</span>,<br>        <span class="hljs-attr">&#x27;USER&#x27;:</span> <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-attr">&#x27;PASSWORD&#x27;:</span> <span class="hljs-string">&#x27;123456&#x27;</span>,<br>        <span class="hljs-attr">&#x27;HOST&#x27;:</span> <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-attr">&#x27;PORT&#x27;:</span> <span class="hljs-string">&#x27;3306&#x27;</span>,<br>    &#125;<br>&#125;<br><span class="hljs-string">同时在末尾STATIC_URL</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;/static/&#x27;</span><span class="hljs-string">处加入</span><br><br><span class="hljs-string">STATICFILES_DIRS</span> <span class="hljs-string">=</span> [<br>    <span class="hljs-string">os.path.join(BASE_DIR</span>,<span class="hljs-string">&#x27;static&#x27;</span><span class="hljs-string">)</span><br>]<br><br><span class="hljs-string">在总connect文件夹中</span><br><span class="hljs-string">加入文件夹templates用来存放html，加入static文件夹存放img，js，css</span><br><span class="hljs-string">在小connect文件夹中的setting.py</span><br><span class="hljs-string">添加import</span> <span class="hljs-string">os</span><br><span class="hljs-string">并在其中的TEMPLATES的DIRS加入os.path.join(BASE_DIR,&#x27;templates&#x27;)</span><br><br><span class="hljs-string">在STATIC_URL</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;/static/&#x27;</span><span class="hljs-string">末尾加入</span><br><span class="hljs-string">STATICFILES_DIRS</span> <span class="hljs-string">=</span> [<br>    <span class="hljs-string">os.path.join(BASE_DIR</span>,<span class="hljs-string">&#x27;static&#x27;</span><span class="hljs-string">)</span><br>]<br></code></pre></div></td></tr></table></figure><p>在templates中新建list.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>番剧列表<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&#123;% for i in anime %&#125;<br>&#123;&#123;i.0&#125;&#125;---<br>&#123;&#123;i.1&#125;&#125;---<br>&#123;&#123;i.2&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在templates中新建index.html，用来显示登录按钮Login</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>请点击Login进行B站用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/login/&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-comment">&lt;!--这个用来实现跳转--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在templates中新建login.html，用来显示index.html跳转后的内容</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login/&quot;</span>&gt;</span><br>    &#123;%csrf_token%&#125;<br>    user:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    pwd:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在c中的views.py中，写入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect <br><span class="hljs-comment">#render 返回页面内容（渲染变量到模板中），并且没有发送第二次请求</span><br><span class="hljs-comment">#redirect 发送了第二次请求，是个跳转函数，而且会返回302的状态码</span><br><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list</span>(<span class="hljs-params">request</span>):</span><br>    cur1 = connection.cursor()<br>    cur1.execute(<span class="hljs-string">&#x27;select * from anime&#x27;</span>)<br>    rows = cur1.fetchall()<br>    <span class="hljs-comment"># for row in rows:</span><br>    <span class="hljs-comment">#     print(row)</span><br>    tmp = &#123;<br>        <span class="hljs-string">&#x27;anime&#x27;</span>:rows<br>    &#125;<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;list.html&#x27;</span>,context=tmp)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">if</span> request.method==<span class="hljs-string">&#x27;POST&#x27;</span>:<br>        user=request.POST.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>        pwd=request.POST.get(<span class="hljs-string">&#x27;pwd&#x27;</span>)<br>        cur2 = connection.cursor()<br>        sql = <span class="hljs-string">&quot;select pwd from users where user=&#x27;&quot;</span>+user+<span class="hljs-string">&quot;&#x27;&quot;</span><br>        cur2.execute(sql)<br>        i = cur2.fetchone()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]) == <span class="hljs-built_in">int</span>(pwd):<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/list&#x27;</span>) <span class="hljs-comment">#如果密码正确，则跳转到list页面，发生第二次请求</span><br>        <span class="hljs-comment">#如果返回的页面对应的def函数中没有类似数据库查询等操作，则使用return render</span><br>        <span class="hljs-comment">#若def函数涉及其他操作，则要用redirect</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;登录失败&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;login.html&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>在小connect文件夹的urls.py中，写入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> include, url<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;c.urls&#x27;</span>))<br>]<br></code></pre></div></td></tr></table></figure><p>在c文件夹中，创建一个urls.py文件，并写入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index),<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>,views.login),<br>    path(<span class="hljs-string">&#x27;list/&#x27;</span>,views.<span class="hljs-built_in">list</span>),<br>]<br></code></pre></div></td></tr></table></figure><h2 id="主项目里面的url负责分配url到不同的app里面，app里面的url块负责自己的路由选择"><a href="#主项目里面的url负责分配url到不同的app里面，app里面的url块负责自己的路由选择" class="headerlink" title="主项目里面的url负责分配url到不同的app里面，app里面的url块负责自己的路由选择"></a>主项目里面的url负责分配url到不同的app里面，app里面的url块负责自己的路由选择</h2><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">大概的流程图&#123;在templates添加html文件在app下的view添加def</span>  <span class="hljs-string">...(request)return</span> <span class="hljs-string">render(request,&#x27;...&#x27;)在app下的urls中添加路径path[&#x27;.../&#x27;,views.....]&#125;</span><br></code></pre></div></td></tr></table></figure><p>现在输入python manage.py runserver即可访问页面</p><h2 id="关于数据迁移，这部分是减轻程序员工作，在python中直接建表，并用python类型的操作集合-增删改查-，但是在本项目中，只用from-django-db-import-connection即可"><a href="#关于数据迁移，这部分是减轻程序员工作，在python中直接建表，并用python类型的操作集合-增删改查-，但是在本项目中，只用from-django-db-import-connection即可" class="headerlink" title="关于数据迁移，这部分是减轻程序员工作，在python中直接建表，并用python类型的操作集合(增删改查)，但是在本项目中，只用from django.db import connection即可"></a>关于数据迁移，这部分是减轻程序员工作，在python中直接建表，并用python类型的操作集合(增删改查)，但是在本项目中，只用from django.db import connection即可</h2><p>在c文件夹中</p><p>向models.py文件添加</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>(<span class="hljs-params">models.Model</span>):</span>    first_name = models.CharField(max_length=<span class="hljs-number">30</span>)    last_name = models.CharField(max_length=<span class="hljs-number">30</span>)<br></code></pre></div></td></tr></table></figure><p>接着在终端输入</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">python</span> <span class="hljs-string">manage.py</span> <span class="hljs-string">makemigrations</span><br><span class="hljs-string">python</span> <span class="hljs-string">manage.py</span> <span class="hljs-string">migrate</span><br></code></pre></div></td></tr></table></figure><p>即可在navicat premium中的数据库中找到Person表</p>]]></content>
    
    
    <categories>
      
      <category>django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库，网站设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树莓派的初步配置及无屏无网线连笔记本电脑</title>
    <link href="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/"/>
    <url>/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><font color="orange">前言：</font></h2><p>由于之前弄一些比赛项目，了解到了树莓派和tensorflow，安装的过程确实非常痛苦，网上的资料水平参差不齐，往往会挖好多坑等你跳，所以我打算写这篇安装教程，一来是想把之前看到的大佬的教程记录下来，给后面的同学同时也是自己，少走弯路。二来留个纪念，纪念那段时间的秃头熬夜hh。</p><p>该教程依然具有很强的主观性，所以可能没办法照顾到所有的同学，实在是抱歉~</p><p><font color="green">还是一句话，配置环境很繁琐，但却是最基本的，也是技术含量最低的。我们要的是能够尽快安装好环境，然后使用它去完成更有价值的东西:)</font></p><h2 id="初始配置："><a href="#初始配置：" class="headerlink" title="初始配置："></a><font color="orange">初始配置：</font></h2><h3 id="完成TF卡的初步格式化。"><a href="#完成TF卡的初步格式化。" class="headerlink" title="完成TF卡的初步格式化。"></a><font color="cornflowerblue">完成TF卡的初步格式化。</font></h3><p>首先需要准备一张<code>32G</code>的<font color="cyan">TF卡</font>，和一个<font color="cyan">读卡器</font>，将带有TF卡的读卡器插入笔记本电脑后，会提示格式化，我们需要点击<strong>取消</strong>。<font color="red">注</font>：可能以后每次插入读卡器都会出现该提示，一定要记得<strong>点击取消</strong></p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/1.jpg"></p><p>然后可以看到会多出两个盘，一般第一次弄的话，只有一个boot盘</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/2.png"></p><p>这里我们需要启动软件SDFormatter来手动格式化TF卡,打开SDFormatter.exe软件。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/3.png"></p><p>选择boot盘(F：)，点击格式化，若有弹窗，点击确定即可，或者失败的话，再次格式化即可。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/4.png"></p><p>这时就可以看到，BOOT盘变为了TF卡的大小，我的是32G的，所以这里为29.7G，属于正常现象</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/5.png"></p><hr><h3 id="安装树莓派系统"><a href="#安装树莓派系统" class="headerlink" title="安装树莓派系统"></a><font color="cornflowerblue">安装树莓派系统</font></h3><p>具体树莓派的系统下载可自寻CSDN教程，应该有三个版本，①无桌面版(推荐给很熟悉linux操作系统的大佬)，②桌面简化版(带桌面但是没有安装官方推荐的各种应用软件，推荐给TF卡容量较小的同学)，③桌面完整版(推荐给纯小白，缺点就是这三个版本中，第三种体积最大，可能会安装一些我们不需要的软件)</p><p>首先把我们下载好的镜像文件，通过Win32DiskImager.exe软件，烧录到TF卡中</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/6.png"></p><p>打开该软件，默认会找到对应的F：盘，如果没有可以自己设置一下。点击箭头所指的位置，寻找下载好的树莓派系统镜像文件所在的位置。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/7.png"></p><p>我这里的话，把镜像文件放到了D盘目录下，选中并点击右下角的打开即可。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/8.png"></p><p>之后点击写入(可能会出现提示，这里我们点击确定)，然后等待完成即可:)</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/9.png"></p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/10.png"></p><p><font color="red">注：</font>完成后，电脑可能会再次提示是否格式化，这里我们还是点击取消，如果点了确定，那只能重来一边了哈哈</p><hr><h3 id="激活WIFI，SSH，搭建VNC"><a href="#激活WIFI，SSH，搭建VNC" class="headerlink" title="激活WIFI，SSH，搭建VNC"></a><font color="cornflowerblue">激活WIFI，SSH，搭建VNC</font></h3><p>这里看这篇大佬的配置即可 </p><p><a href="https://github.com/rcdrones/pi4_tutorial">树莓派教学</a></p><p>进入上述网址链接后，点击红框内容即可查看大佬的教程(也可以查看大佬的其他教程)</p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/46.png" style="zoom:50%;"><p>由于我的是校园网(<font color="red">校园网必须要网页端登录</font>，应该可以实现，但是太麻烦了)，所以有些地方可能有点不同，接下来我会详细说明校园网的配置。</p><p>在BOOT盘(F:)，新建一个文件<code>wpa_supplicant.conf</code>，后缀名为<code>.conf</code>，并用记事本(一定要用记事本打开)</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/11.png"></p><p>按红色箭头，打开移动热点。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/12.png"></p><p>并且右键，点击”转到设置”</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/13.png"></p><p>我们可以在红框内看到“网络名称“和”网络密码”，也可以点击编辑，更改密码和名称。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/14.png"></p><p>知道名称和密码之后，将我们刚才创建好的<code>wpa_supplicant.conf</code>，用记事本打开，找不到记事本，可以右键该文件，选择打开方式即可。</p><p>将下面的代码复制粘贴到该文件内，并更改自己的”网络名称”和”网络密码”.</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">country=CN</span><br><span class="hljs-string">ctrl_interface=DIR=/var/run/wpa_supplicant</span> <span class="hljs-string">GROUP=netdev</span><br><span class="hljs-string">update_config=1</span><br> <br> <br><span class="hljs-string">network=&#123;</span><br><span class="hljs-string">ssid=&quot;WiFi-B&quot;</span><span class="hljs-comment">#ssid:网络的ssid</span><br><span class="hljs-string">psk=&quot;12345678&quot;</span><span class="hljs-comment">#psk:密码</span><br><span class="hljs-string">key_mgmt=WPA-PSK</span><span class="hljs-comment"># WiFi 使用WPA/WPA2加密</span><br><span class="hljs-string">priority=1</span><span class="hljs-comment">#priority:连接优先级，数字越大优先级越高（不可以是负数）</span><br><span class="hljs-string">scan_ssid=0</span>   <span class="hljs-comment">#scan_ssid:连接隐藏WiFi时需要指定该值为1</span><br><span class="hljs-string">&#125;</span><br></code></pre></div></td></tr></table></figure><p>扩展内容：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#如果你的 WiFi 没有密码</span><br><span class="hljs-string">network=&#123;</span><br><span class="hljs-string">ssid=&quot;你的无线网络名称（ssid）&quot;</span><br><span class="hljs-string">key_mgmt=NONE</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-comment">#如果你的 WiFi 使用WEP加密</span><br><span class="hljs-string">network=&#123;</span><br><span class="hljs-string">ssid=&quot;你的无线网络名称（ssid）&quot;</span><br><span class="hljs-string">key_mgmt=NONE</span><br><span class="hljs-string">wep_key0=&quot;你的wifi密码&quot;</span><br><span class="hljs-string">&#125;</span><br><br><span class="hljs-comment">#如果你的 WiFi 使用WPA/WPA2加密</span><br><span class="hljs-string">network=&#123;</span><br><span class="hljs-string">ssid=&quot;你的无线网络名称（ssid）&quot;</span><br><span class="hljs-string">key_mgmt=WPA-PSK</span><br><span class="hljs-string">psk=&quot;你的wifi密码&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></div></td></tr></table></figure><p>修改完后，保存即可。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/15.png"></p><p>在windows电脑上，进去boot分区。<font color="cyan">建立一个名字为ssh的空白文件即可。</font><font color="cyan">注意要小写且不要有任何扩展名。</font> 树莓派在启动之后会在检测到这个文件之后自动启用 ssh 服务。随后即可通过<em>登录路由器</em>找到树莓派的 IP 地址，通过 ssh 连接到树莓派了。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/16.png"></p><p>接下来安全弹出读卡器即可。</p><hr><h3 id="Putty和VNC的配置和简单使用"><a href="#Putty和VNC的配置和简单使用" class="headerlink" title="Putty和VNC的配置和简单使用"></a><font color="cornflowerblue">Putty和VNC的配置和简单使用</font></h3><p>将TF卡插入树莓派之后，启动树莓派，可发现绿灯一开始为亮，在一段时间后就不亮了(属于正常现象)，表示现在已启动TF卡内的系统。</p><p>我们用刚才的方法，打开移动热点，在稍等一段时间后，即可发现从0/8变为了1/8，说明树莓派已经连到了我们的笔记本电脑。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/17.png"></p><p>同样右键点击，并点击”转到设置”，即可发现树莓派的IP地址了，有了这个地址，我们就可以在电脑端，通过putty或者VNC来控制树莓派了。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/18.png"></p><p>点击putty.exe</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/19.png"></p><p>输入刚才获得的树莓派IP地址，并点击open即可(可能会出现弹窗，我们点击”是”就行)。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/20.png"></p><p>然后需要我们输入账号和密码，一般初始化如下</p><p>账号：<code>pi</code></p><p>密码：<code>raspberry</code></p><p>出现下面的提示说明成功登录啦~</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/21.png"></p><p>在该界面下，输入<code>sudo raspi-config</code>并回车，选择红框内的<code>Interface Options</code>(可能系统不懂，会有略微的不同，但是大概意思是相同的)。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/22.png"></p><p>找到VNC并再次回车</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/23.png"></p><p>选择YES，之后选择Finish即可</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/24.png"></p><p>之后再次输入<code>sudo raspi-config</code>,选择<code>Display Options</code>，再选择<code>Resolution</code></p><p>将分辨率选择为1920x1080，之后可能会自动重启，或者手动输入<code>sudo reboot</code>重启即可</p><p><font color="red">注：</font>由于各版本的问题，上述一些英文单词可能和实际显示的会有小出入，但是含义都是相同的，如果在<code>Display Options</code>中没有找到<code>Resolution</code>，可以在别的选项中找找看。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/25.png"></p><p>重启之后。</p><p>用同样的方法找到树莓派的IP地址，IP地址可能会变的，最好每次都找一下。</p><p>找到树莓派的IP地址后，打开软件vncviewer.exe</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/26.png"></p><p>在红框内输入树莓派的IP地址，并回车(若出现提示，点击continue)即可连接。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/27.png"></p><p>同样需要我们输入树莓派的账号和密码。</p><p>账号：<code>pi</code></p><p>密码：<code>raspberry</code></p><p>登录进去后，看到如下显示说明已完成树莓派和VNC的连接！</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/28.png"></p><p>注：还是强烈建议使用HDMI连接显示屏，或者连自己家的WIFI，用移动热点，确实很考验耐心(笑)</p><p>后续的中文设置，靠大家自行百度CSDN或者其他教程hh，记得常备份一下自己的TF卡，防止出现不测(笑)</p><hr><h2 id="树莓派创建python虚拟环境，并配置tensorflow2-2-0"><a href="#树莓派创建python虚拟环境，并配置tensorflow2-2-0" class="headerlink" title="树莓派创建python虚拟环境，并配置tensorflow2.2.0"></a><font color="orange">树莓派创建python虚拟环境，并配置tensorflow2.2.0</font></h2><h3 id="树莓派换源及python虚拟环境配置"><a href="#树莓派换源及python虚拟环境配置" class="headerlink" title="树莓派换源及python虚拟环境配置"></a><font color="cornflowerblue">树莓派换源及python虚拟环境配置</font></h3><p>按这个教程，在<font color="orange">终端</font>即可更换为国内源<a href="https://www.jianshu.com/p/a730755577a3">RaspberryPi4B树莓派4B，修改为国内清华源</a></p><p>但最后的<code>sudo apt-get upgrade</code>这条命令还是不要执行了，这条命令是用来更新文件的，但是如果你连的和我一样是移动热点的话，网速实在是太慢了，可能还会报错，所以不建议执行。</p><p>接下来跟着这个大佬的教程<a href="https://blog.csdn.net/happywlg123/article/details/107286458">树莓派安装TensorFlow2.0</a>。<font color="red">注：所有虚拟环境里的操纵和更新，都需要先激活该虚拟环境后，才能进行。</font></p><p><font color="red">完成第7步更新pip后即可停止，后面的教程可以作为一个参考</font>，虚拟环境的名称也可以自己设置，不一定叫做venv，因为我们的虚拟环境用来完成yolov4的任务，所以我的虚拟环境取名为yol4</p><p><code>virtualenv --system-site-packages -p python3 ./yol4</code></p><p><code>source ./yol4/bin/activate</code> 激活成功后，即可</p><p>该文件也可以很容易被找到，如果有什么东西在虚拟环境中安装错误，也可以直接删除yol4这个文件夹即可。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/29.png"></p><h3 id="虚拟环境内安装tensorflow2-2-0"><a href="#虚拟环境内安装tensorflow2-2-0" class="headerlink" title="虚拟环境内安装tensorflow2.2.0"></a><font color="cornflowerblue">虚拟环境内安装tensorflow2.2.0</font></h3><p>在这个网址<a href="https://github.com/lhelontra/tensorflow-on-arm/releases">tensorflow树莓派各版本</a>中，找到所需要的tensorflow版本，我这里选择2.2.0版本，并点击进入Tensorflow - 2.2.0</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/30.png"></p><p>进入对应版本的网页后，在网页最下端可以找到对应版本的下载连接，选择红框内的下载即可，如果版本不同的话，可以百度找一下对应的版本，cp37表示的应该是python3.7版本，cp35则是python3.5版本的。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/31.png"></p><p>上述下载过程是在电脑端完成的，之后通过VNC，即可把下载好的tensorflow传给树莓派。</p><p>这里我分享一下tensorflow2.2.0的文件，可能GitHub上下载太慢</p><p>链接：<a href="https://pan.baidu.com/s/1gncAfOz1uEBZ0mR0vyL7cw">https://pan.baidu.com/s/1gncAfOz1uEBZ0mR0vyL7cw</a><br>提取码：31xt </p><p>下载好后，可以通过下面的图片，将tensorflow传到树莓派系统桌面上</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/32.png"></p><p>传送成功后，我把tensorflow文件放到了这里</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/33.png"></p><p>打开终端，输入<code>cd /home/pi</code>(<font color="red">注：</font>该路径为你刚才存放tensorflow文件的路径，如果和我存放的位置一样，则不需要修改)</p><p>然后输入<code>source ./yol4/bin/activate</code></p><p>来激活你的虚拟环境，像下图显示的一样说明已激活并进入你的虚拟环境。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/34.png"></p><p>输入<code>pip install tensorflow-2.2.0-cp37-none-linux_armv7l.whl</code>，即可开始安装</p><p><font color="red">注：接下来为玄学问题。若出现安装失败爆红等等问题，请尝试重新执行一遍安装命令，或者更换系统源，或者更换pip的源，祝您好运！</font></p><p>一般爆红或爆黄都是超时的问题，多运行几遍<code>pip install tensorflow-2.2.0-cp37-none-linux_armv7l.whl</code>一般就可以解决。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/35.png"></p><p>若出现爆黄，可以尝试稍后再执行一遍命令，或者单独下载该文件</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/36.png"></p><p>安装完成后，可输入<code>pip list</code>查看</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/37.png"></p><p>之后输入<code>python</code>，然后输入<code>import tensorflow as tf</code>，若无报错，说明已在yol4虚拟环境下成功安装tensorflow2.2.0，辛苦了~</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/38.png"></p><p>接着输入<code>tf.__version__</code>，也可查看对应的版本。</p><p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/39.png"></p><hr><h3 id="使用树莓派自带的python编译器，并切换到对应的虚拟环境中"><a href="#使用树莓派自带的python编译器，并切换到对应的虚拟环境中" class="headerlink" title="使用树莓派自带的python编译器，并切换到对应的虚拟环境中"></a><font color="cornflowerblue">使用树莓派自带的python编译器，并切换到对应的虚拟环境中</font></h3><p>由于之前我们选择的树莓派系统为完整版，所以系统中已经安装了对应的python编译器 <code>Thonny Python IDE</code></p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/40.png" style="zoom:80%;"><p>打开该编译器后，点击箭头所指位置，并选择Configure interpreter…</p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/41.png" style="zoom:80%;"><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/42.png" style="zoom: 67%;"><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/43.png" style="zoom: 67%;"><p>找到我们的虚拟环境下的bin文件夹里的python3.7并选中。</p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/44.png" style="zoom: 67%;"><p>之后可以新建一个test.py文件，测试一下</p><img src="/2021/04/30/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%88%9D%E6%AD%A5%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%97%A0%E5%B1%8F%E6%97%A0%E7%BD%91%E7%BA%BF%E8%BF%9E%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91/45.png" style="zoom: 67%;"><p>应该和终端里一样，没有什么报错的。到此就结束啦，后面可能还会有更新，或者没有hh，谢谢你的阅读~</p>]]></content>
    
    
    <categories>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode每日一题</title>
    <link href="/2021/04/26/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <url>/2021/04/26/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><font color="cornflowerblue">两数之和</font></h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>]<span class="hljs-string">,</span> <span class="hljs-string">target</span> <span class="hljs-string">=</span> <span class="hljs-number">9</span><br><span class="hljs-string">输出：[0,1]</span><br><span class="hljs-string">解释：因为</span> <span class="hljs-string">nums[0]</span> <span class="hljs-string">+</span> <span class="hljs-string">nums[1]</span> <span class="hljs-string">==</span> <span class="hljs-number">9</span> <span class="hljs-string">，返回</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>] <span class="hljs-string">。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<span class="hljs-string">,</span> <span class="hljs-string">target</span> <span class="hljs-string">=</span> <span class="hljs-number">6</span><br><span class="hljs-string">输出：[1,2]</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]<span class="hljs-string">,</span> <span class="hljs-string">target</span> <span class="hljs-string">=</span> <span class="hljs-number">6</span><br><span class="hljs-string">输出：[0,1]</span><br></code></pre></div></td></tr></table></figure><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p><strong><font color="orange">(哈希表)O(n)</font></strong></p><p><strong><font color="orange">所用数据结构</font><strong>：C++中的哈希表——</strong><font color="orange">unordered_map&lt;int,int&gt; hash</font></strong></p><p><strong>hash[nums[i]] = i</strong></p><p>只需循环一边<strong>nums</strong>数组，每步循环中：</p><ol><li>判断哈希表中是否存在target-nums[i];</li><li>将nums[i]插入哈希表中；</li></ol><p><font color="orange">这两步顺序不能交换，否则会出现同一个元素多次使用的情况。</font></p><h3 id="C-代码："><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        unordered_map&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;hash;<br>        <span class="hljs-comment">//hash的key = nums[i], value = i;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> ano = target - nums[i];<br>            <span class="hljs-comment">//count用来检查是否存在hash[ano]，即key=ano处是否存在value</span><br>            <span class="hljs-comment">//判断哈希表中是否存在等于target - nums[i]的key，如果有，说明该key也在nums数组中。则输出hash[ano]</span><br>            <span class="hljs-keyword">if</span>(hash.<span class="hljs-built_in">count</span>(ano)) <br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(hash[ano]);<br>                res.<span class="hljs-built_in">push_back</span>(i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            hash[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr><h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a><font color="cornflowerblue">两数相加</font></h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><img src="/2021/04/26/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/1.png" style="zoom: 67%;"><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：l1</span> <span class="hljs-string">=</span> [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<span class="hljs-string">,</span> <span class="hljs-string">l2</span> <span class="hljs-string">=</span> [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]<br><span class="hljs-string">输出：[7,0,8]</span><br><span class="hljs-string">解释：342</span> <span class="hljs-string">+</span> <span class="hljs-number">465</span> <span class="hljs-string">=</span> <span class="hljs-number">807</span><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：l1</span> <span class="hljs-string">=</span> [<span class="hljs-number">0</span>]<span class="hljs-string">,</span> <span class="hljs-string">l2</span> <span class="hljs-string">=</span> [<span class="hljs-number">0</span>]<br><span class="hljs-string">输出：[0]</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：l1</span> <span class="hljs-string">=</span> [<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>]<span class="hljs-string">,</span> <span class="hljs-string">l2</span> <span class="hljs-string">=</span> [<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>]<br><span class="hljs-string">输出：[8,9,9,9,0,0,0,1]</span><br></code></pre></div></td></tr></table></figure><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p><strong><font color="orange">(模拟人工加法) O(n)</font></strong><br>这是道模拟题，模拟我们小时候列竖式做加法的过程：</p><p>从最低位至最高位，逐位相加，如果和大于等于10，则保留个位数字，同时向前一位进1.<br>如果最高位有进位，则需在最前面补1.<br>做有关链表的题目，有个常用技巧：添加一个虚拟头结点：<font color="orange">ListNode *head = new ListNode(-1);</font>，可以简化边界情况的判断。<br>时间复杂度：由于总共扫描一遍，所以时间复杂度是 O(n).</p><h3 id="C-代码：-1"><a href="#C-代码：-1" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode *res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>); <span class="hljs-comment">//添加虚拟头节点，简化边界情况的判断</span><br>        ListNode *cur = res;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l1 || l2 || t)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(l1) t += l1-&gt;val, l1 = l1-&gt;next;<br>            <span class="hljs-keyword">if</span>(l2) t += l2-&gt;val, l2 = l2-&gt;next;<br>            cur = cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t % <span class="hljs-number">10</span>);<br>            t /= <span class="hljs-number">10</span>; <br>        &#125;<br>        <span class="hljs-keyword">return</span> res-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><font color="cornflowerblue">无重复字符的最长子串</font></h2><h3 id="题目描述：-2"><a href="#题目描述：-2" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-string">s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;abcabcbb&quot;</span><br><span class="hljs-string">输出:</span> <span class="hljs-number">3</span> <br><span class="hljs-string">解释:</span> <span class="hljs-string">因为无重复字符的最长子串是</span> <span class="hljs-string">&quot;abc&quot;</span><span class="hljs-string">，所以其长度为</span> <span class="hljs-number">3</span><span class="hljs-string">。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-string">s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;bbbbb&quot;</span><br><span class="hljs-string">输出:</span> <span class="hljs-number">1</span><br><span class="hljs-string">解释:</span> <span class="hljs-string">因为无重复字符的最长子串是</span> <span class="hljs-string">&quot;b&quot;</span><span class="hljs-string">，所以其长度为</span> <span class="hljs-number">1</span><span class="hljs-string">。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-string">s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;pwwkew&quot;</span><br><span class="hljs-string">输出:</span> <span class="hljs-number">3</span><br><span class="hljs-string">解释:</span> <span class="hljs-string">因为无重复字符的最长子串是</span> <span class="hljs-string">&quot;wke&quot;</span><span class="hljs-string">，所以其长度为</span> <span class="hljs-number">3</span><span class="hljs-string">。</span><br>     <span class="hljs-string">请注意，你的答案必须是</span> <span class="hljs-string">子串</span> <span class="hljs-string">的长度，&quot;pwke&quot;</span> <span class="hljs-string">是一个子序列，不是子串。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入:</span> <span class="hljs-string">s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">输出:</span> <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><p><strong><font color="orange">(双指针扫描)O(n)</font></strong></p><p>定义两个指针<code>i,j(i &lt;= j)</code>，表示当前扫描到的子串是<code>[i,j]</code>。扫描过程中，用哈希表<code>unordered_map&lt;char, int&gt; hash</code>来表示<code>[i,j]</code>中每个字符出现的次数。</p><p>例如：<code>hash[ s[i] ]++</code> 表示哈希表 <code>hash</code> 中<code>s[i]出现次数+1</code></p><p>线性扫描时：每次循环流程如下：</p><ol><li>指针 <strong>j</strong> 向后移动一位，同时将哈希表中 <strong>s[j]</strong> 的个数加一：<code>hash[ s[j] ]++</code>;</li><li>假设 <strong>j</strong> 移动前的区间 <strong>[i,j]</strong> 没有重复字符，则 <strong>j</strong> 移动后，只有 <strong>s[j]</strong> 可能出现2次。如果 <strong>s[j]</strong> 出现次数大于1，那么我们就不断向后移动 <strong>i</strong>，直到区间 <strong>[i,j]</strong> 中 <strong>s[j]</strong> 的个数等于1为止；</li></ol><p><img src="/2021/04/26/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/2.png"></p><h3 id="C-代码：-2"><a href="#C-代码：-2" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>&gt; hash;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            hash[s[j]]++;<br>            <span class="hljs-keyword">while</span>(hash[s[j]] &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                hash[s[i]]--;<br>                i++;<br>            &#125;<br>            res = <span class="hljs-built_in">max</span>(res, j - i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><font color="cornflowerblue">最长回文子串</font></h2><h3 id="题目描述：-3"><a href="#题目描述：-3" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;babad&quot;</span><br><span class="hljs-string">输出：&quot;bab&quot;</span><br><span class="hljs-string">解释：&quot;aba&quot;</span> <span class="hljs-string">同样是符合题意的答案。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;cbbd&quot;</span><br><span class="hljs-string">输出：&quot;bb&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-string">输出：&quot;a&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;ac&quot;</span><br><span class="hljs-string">输出：&quot;a&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h3><p><strong><font color="cyan">首先考虑回文串一共有几种？</font></strong></p><ol><li>长度为<font color="orange">偶数</font>：两两配对，例如<code>aabb</code>，<code>ccddee</code>。</li><li>长度为<font color="orange">奇数</font>：除了最中间的单独一个元素，其他两两配对，例如<code>a</code>，<code>aabcc</code></li></ol><ul><li><p><strong><font color="cyan">长度为奇数：</font></strong></p><p>假设已存在<font color="orange">长度为奇数</font>的回文子串，并且<font color="orange">该回文子串的最中间的元素</font>为<code>i</code>，设置两个指针<code>l</code>和<code>r</code>： <code>l = i - 1</code>，<code>r = i + 1</code></p><p><code>l</code>和 <code>r</code>分别从<code>i</code>的左右两边出发，若不满足<code>l &gt;= 0 &amp;&amp; r &lt; s.size() &amp;&amp; s[l] == s[r]</code>，则说明找到了该回文子串的左右端点，则该回文子串的长度为：<code>r - l - 1</code></p></li><li><p><strong><font color="cyan">长度为偶数：</font></strong></p><p>偶数情况与奇数相同，只需要将<code>l</code>和<code>r</code>设置为：<code>l = i</code>，<code>r = i + 1</code>即可</p></li></ul><p><strong><font color="cyan">整体：</font></strong></p><p>将<code>i</code>所指的<font color="orange">每一个字符</font>都当作某一个回文子串<font color="orange">最中间的值</font>(奇数)，或者<font color="orange">最中间的两个值中的一个</font>(偶数)，只需遍历一边原字符串<code>S</code>，即可找到最长的回文子串。</p><h3 id="C-代码：-3"><a href="#C-代码：-3" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        string res;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> l = i, r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; s[l] == s[r]) l--, r++;<br>            <span class="hljs-keyword">if</span>(res.<span class="hljs-built_in">size</span>() &lt; r - l - <span class="hljs-number">1</span>) res = s.<span class="hljs-built_in">substr</span>(l + <span class="hljs-number">1</span>, r - l - <span class="hljs-number">1</span>);<br><br>            l = i - <span class="hljs-number">1</span>, r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.<span class="hljs-built_in">size</span>() &amp;&amp; s[l] == s[r]) l--, r++;<br>            <span class="hljs-keyword">if</span>(res.<span class="hljs-built_in">size</span>() &lt; r - l - <span class="hljs-number">1</span>) res = s.<span class="hljs-built_in">substr</span>(l + <span class="hljs-number">1</span>, r - l - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr><h2 id="Z字形变换"><a href="#Z字形变换" class="headerlink" title="Z字形变换"></a><font color="cornflowerblue">Z字形变换</font></h2><h3 id="题目描述：-4"><a href="#题目描述：-4" class="headerlink" title="题目描述："></a>题目描述：</h3><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">P</span>   <span class="hljs-string">A</span>   <span class="hljs-string">H</span>   <span class="hljs-string">N</span><br><span class="hljs-string">A</span> <span class="hljs-string">P</span> <span class="hljs-string">L</span> <span class="hljs-string">S</span> <span class="hljs-string">I</span> <span class="hljs-string">I</span> <span class="hljs-string">G</span><br><span class="hljs-string">Y</span>   <span class="hljs-string">I</span>   <span class="hljs-string">R</span><br></code></pre></div></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">string</span> <span class="hljs-string">convert(string</span> <span class="hljs-string">s,</span> <span class="hljs-string">int</span> <span class="hljs-string">numRows);</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">numRows</span> <span class="hljs-string">=</span> <span class="hljs-number">3</span><br><span class="hljs-string">输出：&quot;PAHNAPLSIIGYIR&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">numRows</span> <span class="hljs-string">=</span> <span class="hljs-number">4</span><br><span class="hljs-string">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class="hljs-string">解释：</span><br><span class="hljs-string">P</span>     <span class="hljs-string">I</span>    <span class="hljs-string">N</span><br><span class="hljs-string">A</span>   <span class="hljs-string">L</span> <span class="hljs-string">S</span>  <span class="hljs-string">I</span> <span class="hljs-string">G</span><br><span class="hljs-string">Y</span> <span class="hljs-string">A</span>   <span class="hljs-string">H</span> <span class="hljs-string">R</span><br><span class="hljs-string">P</span>     <span class="hljs-string">I</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：s</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;A&quot;</span><span class="hljs-string">,</span> <span class="hljs-string">numRows</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><br><span class="hljs-string">输出：&quot;A&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h3><p>时间复杂度：<font color="orange">O(n)</font></p><p>这题考察的是<font color="orange">找规律</font>和<font color="orange">等差数列</font></p><p>我们可以让<code>numRows =  4</code>，并观察<font color="orange">首行</font>，不难发现，首行的每个元素之间，公差为<code>2n - 2</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-number">0</span>     <span class="hljs-number">6</span>       <span class="hljs-number">12</span><br><span class="hljs-number">1</span>   <span class="hljs-number">5</span> <span class="hljs-number">7</span>    <span class="hljs-number">11</span> <span class="hljs-string">..</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span>   <span class="hljs-number">8</span> <span class="hljs-number">10</span><br><span class="hljs-number">3</span>     <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure><img src="/2021/04/26/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/3.png" style="zoom:67%;"><p>对于<font color="orange">末行</font>来说，元素之间的公差也为<code>2n - 2</code> .</p><p>而由于第<code>i</code>行(<code>0 &lt; i &lt; numRows - 1</code>)是由<font color="orange">竖线</font>上的元素和<font color="orange">斜线</font>上的元素<font color="orange">共同构成</font>，我们需要单独分开来看</p><ol><li>对于<font color="orange">竖线上且处于同一行</font>的元素：元素间公差为<code>2n - 2</code></li><li>对于<font color="orange">斜线上且处于同一行</font>的元素：元素间公差也<code>2n - 2</code></li></ol><p>不难看出，对于第<code>i</code>行(<code>0 &lt; i &lt; numRows - 1</code>)，只需要每次<font color="orange">交替</font>地输出即可</p><h3 id="C-代码：-4"><a href="#C-代码：-4" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">convert</span><span class="hljs-params">(string s, <span class="hljs-keyword">int</span> numRows)</span> </span>&#123;<br>        string res;<br>        <span class="hljs-keyword">if</span>(numRows == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> s;<br>        <span class="hljs-keyword">int</span> d = (numRows - <span class="hljs-number">1</span>)*<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numRows; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || i == numRows - <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i; k &lt; s.<span class="hljs-built_in">size</span>(); k += d) res += s[k];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i, j = d - i; k &lt; s.<span class="hljs-built_in">size</span>() || j &lt; s.<span class="hljs-built_in">size</span>(); k += d, j += d)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(k &lt; s.<span class="hljs-built_in">size</span>()) res += s[k];<br>                    <span class="hljs-keyword">if</span>(j &lt; s.<span class="hljs-built_in">size</span>()) res += s[j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr><h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a><font color="cornflowerblue">整数反转</font></h2><h3 id="题目描述：-5"><a href="#题目描述：-5" class="headerlink" title="题目描述："></a>题目描述：</h3><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2^31, 2^31 − 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：x</span> <span class="hljs-string">=</span> <span class="hljs-number">123</span><br><span class="hljs-string">输出：321</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：x</span> <span class="hljs-string">=</span> <span class="hljs-number">-123</span><br><span class="hljs-string">输出：-321</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：x</span> <span class="hljs-string">=</span> <span class="hljs-number">120</span><br><span class="hljs-string">输出：21</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">输入：x</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><br><span class="hljs-string">输出：0</span><br></code></pre></div></td></tr></table></figure><h3 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h3><p>时间复杂度分析：一共有 <code>O(logn)</code>位，对于每一位的计算量是常数级的，所以总时间复杂度是 <code>O(logn)</code>.</p><p>需要注意，因为int型整数逆序后可能会溢出，所以我们要用long long记录中间结果</p><p>在C++中，可用INT32_MAX表示32位的最大范围，对应最小范围为INT32_MIN.</p><h3 id="C-代码：-5"><a href="#C-代码：-5" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x != <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(res &gt; INT32_MAX || res &lt; INT32_MIN) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP的不定期知识更新</title>
    <link href="/2021/04/26/CPP%E7%9A%84%E4%B8%8D%E5%AE%9A%E6%9C%9F%E7%9F%A5%E8%AF%86%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/04/26/CPP%E7%9A%84%E4%B8%8D%E5%AE%9A%E6%9C%9F%E7%9F%A5%E8%AF%86%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="map的用法实例"><a href="#map的用法实例" class="headerlink" title="map的用法实例"></a><font color="orange">map的用法实例</font></h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//定义一个mapd对象</span><br>    map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt; hash;<br><br><span class="hljs-comment">//插入元素</span><br>    <span class="hljs-comment">//用insert函数插入pair，如果之前存在hash[i]则无法插入</span><br>    hash.<span class="hljs-built_in">insert</span>(pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt;(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>));<br>    hash.<span class="hljs-built_in">insert</span>(pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt;(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>));<br><br>    <span class="hljs-comment">//用&quot;array&quot;方式插入,可以覆盖之前存在的hash[i]</span><br>    hash[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;c&#x27;</span>;<br>    hash[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;d&#x27;</span>;<br><br>    <span class="hljs-comment">//运行结果：abcd</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) cout &lt;&lt; hash[i];<br>    cout &lt;&lt; endl;<br><span class="hljs-comment">//当所查找的关键key出现时，它返回数据所在对象的位置，如果沒有，返回iter与end函数的值相同。</span><br>    map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">char</span>&gt;::iterator iter;<br>    iter = hash.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(iter != hash.<span class="hljs-built_in">end</span>())<br>    cout &lt;&lt; <span class="hljs-string">&quot;Find, the value is &quot;</span> &lt;&lt;iter-&gt;second&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Do not Find&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//删除与清空元素</span><br>    <span class="hljs-comment">//迭代器删除</span><br>    iter = hash.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    hash.<span class="hljs-built_in">erase</span>(iter);<br>    <span class="hljs-comment">//删除后无法找到b了</span><br>    iter = hash.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(iter != hash.<span class="hljs-built_in">end</span>())<br>    cout &lt;&lt; <span class="hljs-string">&quot;Find, the value is &quot;</span> &lt;&lt;iter-&gt;second&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Do not Find&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-comment">//用关键字删除</span><br>    cout &lt;&lt; hash.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>) &lt;&lt; endl;<span class="hljs-comment">//删除为1，否则为0</span><br><br>    <span class="hljs-comment">//清空hash</span><br>    hash.<span class="hljs-built_in">clear</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>map的基本操作函数</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">C++</span> <span class="hljs-string">maps是一种关联式容器，包含“关键字/值”对</span><br><br><span class="hljs-string">begin()</span>         <span class="hljs-string">返回指向map头部的迭代器</span><br><br><span class="hljs-string">clear(）</span>        <span class="hljs-string">删除所有元素</span><br><br><span class="hljs-string">count()</span>         <span class="hljs-string">返回指定元素出现的次数</span><br><br><span class="hljs-string">empty()</span>         <span class="hljs-string">如果map为空则返回true</span><br><br><span class="hljs-string">end()</span>           <span class="hljs-string">返回指向map末尾的迭代器</span><br><br><span class="hljs-string">equal_range()</span>   <span class="hljs-string">返回特殊条目的迭代器对</span><br><br><span class="hljs-string">erase()</span>         <span class="hljs-string">删除一个元素</span><br><br><span class="hljs-string">find()</span>          <span class="hljs-string">查找一个元素</span><br><br><span class="hljs-string">get_allocator()</span> <span class="hljs-string">返回map的配置器</span><br><br><span class="hljs-string">insert()</span>        <span class="hljs-string">插入元素</span><br><br><span class="hljs-string">key_comp()</span>      <span class="hljs-string">返回比较元素key的函数</span><br><br><span class="hljs-string">lower_bound()</span>   <span class="hljs-string">返回键值&gt;=给定元素的第一个位置</span><br><br><span class="hljs-string">max_size()</span>      <span class="hljs-string">返回可以容纳的最大元素个数</span><br><br><span class="hljs-string">rbegin()</span>        <span class="hljs-string">返回一个指向map尾部的逆向迭代器</span><br><br><span class="hljs-string">rend()</span>          <span class="hljs-string">返回一个指向map头部的逆向迭代器</span><br><br><span class="hljs-string">size()</span>          <span class="hljs-string">返回map中元素的个数</span><br><br><span class="hljs-string">swap()</span>           <span class="hljs-string">交换两个map</span><br><br><span class="hljs-string">upper_bound()</span>    <span class="hljs-string">返回键值&gt;给定元素的第一个位置</span><br><br><span class="hljs-string">value_comp()</span>     <span class="hljs-string">返回比较元素value的函数</span><br></code></pre></div></td></tr></table></figure><p><font color="orange">map和unordered_map的优缺点和不同之处：</font><a href="https://blog.csdn.net/BillCYJ/article/details/78985895">map和unordered_map的差别和使用_陈云佳的专栏-CSDN博客</a></p><hr><h2 id="LinkList的用法"><a href="#LinkList的用法" class="headerlink" title="LinkList的用法"></a><font color="orange">LinkList的用法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span><br><span class="hljs-keyword">int</span> data; <span class="hljs-comment">//结点的数据域</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//结点的指针域</span><br>&#125;LNode, *LinkList; <span class="hljs-comment">//LinkList为指向结构体LNode的指针类型</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList_L</span><span class="hljs-params">(LinkList &amp;L)</span><span class="hljs-comment">//构造一个空的单链表L</span></span><br><span class="hljs-function"></span>&#123;<br>    L=<span class="hljs-keyword">new</span> LNode;     <span class="hljs-comment">//生成新结点作为头结点，用头指针L指向头结点</span><br><span class="hljs-keyword">if</span>(!L)<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">//生成结点失败</span><br>L-&gt;next=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//头结点的指针域置空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList_H</span><span class="hljs-params">(LinkList &amp;L)</span><span class="hljs-comment">//前插法创建单链表</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//输入n个元素的值，建立到头结点的单链表L</span><br><span class="hljs-keyword">int</span> n;<br>LinkList s; <span class="hljs-comment">//定义一个指针变量</span><br>L=<span class="hljs-keyword">new</span> LNode;<br>L-&gt;next=<span class="hljs-literal">NULL</span>; <span class="hljs-comment">//先建立一个带头结点的空链表</span><br>cout &lt;&lt;<span class="hljs-string">&quot;请输入元素个数n：&quot;</span> &lt;&lt;endl;<br>cin&gt;&gt;n;<br>cout &lt;&lt;<span class="hljs-string">&quot;请依次输入n个元素：&quot;</span> &lt;&lt;endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;前插法创建单链表...&quot;</span> &lt;&lt;endl;<br><span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>s=<span class="hljs-keyword">new</span> LNode; <span class="hljs-comment">//生成新结点s</span><br>cin&gt;&gt;s-&gt;data; <span class="hljs-comment">//输入元素值赋给新结点的数据域</span><br>s-&gt;next=L-&gt;next;<br>L-&gt;next=s; <span class="hljs-comment">//将新结点s插入到头结点之后</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList_R</span><span class="hljs-params">(LinkList &amp;L)</span><span class="hljs-comment">//尾插法创建单链表</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//输入n个元素的值，建立带表头结点的单链表L</span><br><span class="hljs-keyword">int</span> n;<br>LinkList s, r;<br>L=<span class="hljs-keyword">new</span> LNode;<br>L-&gt;next=<span class="hljs-literal">NULL</span>; <span class="hljs-comment">//先建立一个带头结点的空链表</span><br>r=L; <span class="hljs-comment">//尾指针r指向头结点</span><br>cout &lt;&lt;<span class="hljs-string">&quot;请输入元素个数n：&quot;</span> &lt;&lt;endl;<br>cin&gt;&gt;n;<br>cout &lt;&lt;<span class="hljs-string">&quot;请依次输入n个元素：&quot;</span> &lt;&lt;endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;尾插法创建单链表...&quot;</span> &lt;&lt;endl;<br><span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>s=<span class="hljs-keyword">new</span> LNode;<span class="hljs-comment">//生成新结点</span><br>cin&gt;&gt;s-&gt;data; <span class="hljs-comment">//输入元素值赋给新结点的数据域</span><br>s-&gt;next=<span class="hljs-literal">NULL</span>;<br>r-&gt;next=s;<span class="hljs-comment">//将新结点s插入尾结点*r之后</span><br>r=s;<span class="hljs-comment">//r指向新的尾结点s</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetElem_L</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span><span class="hljs-comment">//单链表的取值</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//在带头结点的单链表L中查找第i个元素</span><br><span class="hljs-comment">//用e记录L中第i个数据元素的值</span><br><span class="hljs-keyword">int</span> j;<br>LinkList p;<br>p=L-&gt;next;<span class="hljs-comment">//p指向第一个结点，</span><br>j=<span class="hljs-number">1</span>; <span class="hljs-comment">//j为计数器</span><br><span class="hljs-keyword">while</span> (j&lt;i &amp;&amp; p) <span class="hljs-comment">//顺链域向后扫描，直到p指向第i个元素或p为空</span><br>    &#123;<br>p=p-&gt;next; <span class="hljs-comment">//p指向下一个结点</span><br>j++; <span class="hljs-comment">//计数器j相应加1</span><br>&#125;<br><span class="hljs-keyword">if</span> (!p || j&gt;i)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//i值不合法i＞n或i&lt;=0</span><br>e=p-&gt;data; <span class="hljs-comment">//取第i个结点的数据域</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">LocateElem_L</span><span class="hljs-params">(LinkList L, <span class="hljs-keyword">int</span> e)</span> <span class="hljs-comment">//按值查找</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//在带头结点的单链表L中查找值为e的元素</span><br>LinkList p;<br>p=L-&gt;next;<br><span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="hljs-comment">//顺链域向后扫描，直到p为空或p所指结点的数据域等于e</span><br>p=p-&gt;next; <span class="hljs-comment">//p指向下一个结点</span><br><span class="hljs-keyword">if</span>(!p)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//查找失败p为NULL</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert_L</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span><span class="hljs-comment">//单链表的插入</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//在带头结点的单链表L中第i个位置插入值为e的新结点</span><br><span class="hljs-keyword">int</span> j;<br>LinkList p, s;<br>p=L;<br>j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p&amp;&amp;j&lt;i<span class="hljs-number">-1</span>) <span class="hljs-comment">//查找第i-1个结点，p指向该结点</span><br>    &#123;<br>p=p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || j&gt;i<span class="hljs-number">-1</span>)<span class="hljs-comment">//i＞n+1或者i＜1</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>s=<span class="hljs-keyword">new</span> LNode;     <span class="hljs-comment">//生成新结点</span><br>s-&gt;data=e;       <span class="hljs-comment">//将新结点的数据域置为e</span><br>s-&gt;next=p-&gt;next; <span class="hljs-comment">//将新结点的指针域指向结点ai</span><br>p-&gt;next=s;       <span class="hljs-comment">//将结点p的指针域指向结点s</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete_L</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-comment">//单链表的删除</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//在带头结点的单链表L中，删除第i个位置</span><br>LinkList p, q;<br><span class="hljs-keyword">int</span> j;<br>p=L;<br>j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((p-&gt;next)&amp;&amp;(j&lt;i<span class="hljs-number">-1</span>)) <span class="hljs-comment">//查找第i-1个结点，p指向该结点</span><br>&#123;<br>p=p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!(p-&gt;next)||(j&gt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//当i&gt;n或i&lt;1时，删除位置不合理</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>q=p-&gt;next;        <span class="hljs-comment">//临时保存被删结点的地址以备释放空间</span><br>p-&gt;next=q-&gt;next; <span class="hljs-comment">//改变删除结点前驱结点的指针域</span><br><span class="hljs-keyword">delete</span> q;        <span class="hljs-comment">//释放被删除结点的空间</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Listprint_L</span><span class="hljs-params">(LinkList L)</span> <span class="hljs-comment">//单链表的输出</span></span><br><span class="hljs-function"></span>&#123;<br>    LinkList p;<br>    p=L-&gt;next;<br>    <span class="hljs-keyword">while</span> (p)<br>    &#123;<br>        cout&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>p=p-&gt;next;<br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i,x,e,choose;<br>LinkList L;<br>cout &lt;&lt; <span class="hljs-string">&quot;1初始化\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;2创建单链表（前插法）\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;3创建单链表（尾插法）\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;4取值\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;5查找\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;6插入\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;7删除\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;8输出\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;0退出\n&quot;</span>;<br>choose=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (choose!=<span class="hljs-number">0</span>)<br>    &#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;请输入数字选择:&quot;</span>;<br>cin&gt;&gt;choose;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (choose)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//初始化一个空的单链表</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">InitList_L</span>(L))<br>cout &lt;&lt; <span class="hljs-string">&quot;初始化一个空的单链表!\n&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-comment">//创建单链表（前插法）</span><br><span class="hljs-built_in">CreateList_H</span>(L);<br>            cout &lt;&lt; <span class="hljs-string">&quot;前插法创建单链表输出结果:\n&quot;</span>;<br>            <span class="hljs-built_in">Listprint_L</span>(L);<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-comment">//创建单链表（尾插法）</span><br><span class="hljs-built_in">CreateList_R</span>(L);<br>            cout &lt;&lt; <span class="hljs-string">&quot;尾插法创建单链表输出结果:\n&quot;</span>;<br>            <span class="hljs-built_in">Listprint_L</span>(L);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-comment">//单链表的按序号取值</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入一个位置i用来取值:&quot;</span>;<br>cin &gt;&gt; i;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetElem_L</span>(L,i,e))<br>            &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;查找成功\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;第&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;个元素是：&quot;</span>&lt;&lt;e&lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;查找失败\n\n&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-comment">//单链表的按值查找</span><br>cout&lt;&lt;<span class="hljs-string">&quot;请输入所要查找元素x:&quot;</span>;<br>cin&gt;&gt;x;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">LocateElem_L</span>(L,x))<br>cout &lt;&lt; <span class="hljs-string">&quot;查找成功\n&quot;</span>;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;查找失败! &quot;</span> &lt;&lt;endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-comment">//单链表的插入</span><br>cout &lt;&lt; <span class="hljs-string">&quot;请输入插入的位置和元素（用空格隔开）:&quot;</span>;<br>cin &gt;&gt; i;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">ListInsert_L</span>(L, i, x))<br>cout &lt;&lt; <span class="hljs-string">&quot;插入成功.\n\n&quot;</span>;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;插入失败!\n\n&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-comment">//单链表的删除</span><br>cout&lt;&lt;<span class="hljs-string">&quot;请输入所要删除的元素位置i:&quot;</span>;<br>cin&gt;&gt;i;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">ListDelete_L</span>(L, i))<br>cout&lt;&lt;<span class="hljs-string">&quot;删除成功!\n&quot;</span>;<br><span class="hljs-keyword">else</span><br>cout&lt;&lt;<span class="hljs-string">&quot;删除失败!\n&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: <span class="hljs-comment">//单链表的输出</span><br>cout &lt;&lt; <span class="hljs-string">&quot;当前单链表的数据元素分别为:\n&quot;</span>;<br><span class="hljs-built_in">Listprint_L</span>(L);<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode基本安装及配置C和cpp</title>
    <link href="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/"/>
    <url>/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​        因为最近要开始写leetcode算法啥的了，所以打算还是弄一个vscode编译器，之前用的是VS2019，随便照着b站教程就弄好了，但是后来电脑重装了一次，加上觉得平时也不用C++做项目啥的，所以装一个”轻量级”的vscode可能比较好，并且vscode各种插件真的很酷hh，不过确实vscode的配置很麻烦，今天找到一篇博客讲的挺好的，我也在虚拟机上的win10实际安装过来，觉得没啥毛病，就打算把步骤写到自己的博客中.</p><p><font color="orange">参考文章：</font><a href="https://blog.csdn.net/qq_51831175/article/details/115314841">配置vscode的C/C++环境_sponge-dad的博客-CSDN博客</a></p><h3 id="下载vscode"><a href="#下载vscode" class="headerlink" title="下载vscode"></a><font color="cornflowerblue">下载vscode</font></h3><p>可能大家会遇到官网下载过慢的情况，这里按照知乎大佬的教程更换下载地址即可知乎文章：<a href="https://zhuanlan.zhihu.com/p/112215618">国内下载vscode速度慢问题解决 - 知乎 (zhihu.com)</a></p><p>双击下载完的文件，需要的话改一下安装位置即可，到这步的时候，记得勾选一下即可。<img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/1.png"></p><p>打开vscode之后，首先点击此处，改一下语言，和安装c++的基本环境。</p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/2.png"></p><p>搜索Chinese并且点击install，然后重启vscode软件，即可将语言更换为中文。</p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/3.png"></p><p>再搜索C/C++，点击安装即可。</p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/4.png"></p><p>接下来，按照开头提到的文章<a href="https://blog.csdn.net/qq_51831175/article/details/115314841">配置vscode的C/C++环境_sponge-dad的博客-CSDN博客</a>，安装MinGW，以及配置一下环境变量，和.vscode文件夹的三个.json文件的创建即可。</p><p><font color="orange">挖坑：</font>目前按照文章来安装可能还有一些小问题，用起来还是不够舒服。之后一些美化优化的教程也会放到里面来。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a><font color="cornflowerblue">优化</font></h3><p><font color="green">优化一：</font>安装Code Runner，方便运行。</p><p><font color="cyan">点击红色框内</font></p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/5.png"></p><p><font color="cyan">搜索Code Runner并点击安装，我这里已经安装好了。</font></p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/6.png"></p><p><font color="cyan">接着按顺序点击①②步即可</font></p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/7.png"></p><p><font color="cyan">接着给这两个选项都打上勾，然后重启一下vscode即可。</font></p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/8.png"></p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/9.png"></p><p><font color="cyan">新建一个cpp文件，右键点击代码编写空白处，即可看到Run Code和右上角的运行键。ctrl+f5调试后，即可点击Run code 或者运行键运行在终端运行和输入。</font></p><p><img src="/2021/04/25/VScode%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AEC%E5%92%8Ccpp/10.png"></p><p><font color="yellow">备注：</font>可能一开始调试后运行会出现输出乱码或者一两个弹窗错误，大家不要该.vscode内的三个文件的，只要进行了<font color="green">优化一</font>就不会出现错误了，上述问题就不会出现了，大佬的那片配置c/cpp的csdn教程还是很可靠的。</p>]]></content>
    
    
    <categories>
      
      <category>vscode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何自定义live2d看板娘到hexo中</title>
    <link href="/2021/04/20/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%88%B0hexo%E4%B8%AD/"/>
    <url>/2021/04/20/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89live2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%88%B0hexo%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>太懒了，直接把大佬的链接帮过来了(后续我会自己再整理一遍)，不过目前只能使用moc格式的文件，live2d 4.0版本的为moc3，似乎是hexo-helper-live2d暂时还不兼容。</p><p>大佬链接：<a href="https://blog.lete114.top/article/Live2d-Config.html">https://blog.lete114.top/article/Live2d-Config.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些小计划~</title>
    <link href="/2021/04/20/%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%AE%A1%E5%88%92/"/>
    <url>/2021/04/20/%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="目前博客暂定4个更新方向："><a href="#目前博客暂定4个更新方向：" class="headerlink" title="目前博客暂定4个更新方向："></a>目前博客暂定4个更新方向：</h1><blockquote><ol><li>吴恩达老师的机器学习</li><li>yxc老师的leetcode题库</li><li>一些杂文，遇到的各种安装步骤</li><li>大学学习笔记。</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>balabala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用hexo上传一篇文章</title>
    <link href="/2021/04/20/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2021/04/20/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Hexo命令说明</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">init</span> <span class="hljs-comment"># 新建一个网站</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;文章名&quot;</span>  <span class="hljs-comment">#新建文章</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">new</span>  <span class="hljs-string">page</span> <span class="hljs-string">&quot;页面名&quot;</span> <span class="hljs-comment">#新建页面</span><br> <br> <br><span class="hljs-string">hexo</span> <span class="hljs-string">clean</span> <span class="hljs-comment"># 清除缓存文件（db.json和已生成的静态文件，尤其是更换主题后）</span><br> <br> <br><span class="hljs-string">hexo</span> <span class="hljs-string">g</span> <span class="hljs-comment"># 生成静态文件</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">s</span> <span class="hljs-comment"># 启动hexo  （上述两个指令需要在博客根目录下执行）</span><br> <br> <br><span class="hljs-string">hexo</span> <span class="hljs-string">d</span>  <span class="hljs-comment"># 部署到GitHub上（前提是已经添加SSH Key，设置好账户信息）</span><br></code></pre></div></td></tr></table></figure><p><strong>说明：</strong>之前第一次使用hexo new “文章名”时，发现无法显示图片，查了一下解决办法。</p><p><strong>解决步骤：</strong></p><p>①：打开存放博客的文件夹</p><p><img src="/2021/04/20/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/2.png"></p><p>右键打开Git Bash Here,输入命令来安装图片插件</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-asset-image</span> <span class="hljs-string">--save</span><br></code></pre></div></td></tr></table></figure><p>②：在_config.yml配置文件中，按CTRL+F搜索post_asset_folder，并将其修改为 post_asset_folder: true</p><p><img src="/2021/04/20/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/1.png"></p><p>在输入命令来新建一篇文章</p><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">&quot;xxxx&quot;</span><br></code></pre></div></td></tr></table></figure><p>之后在/source/_posts文件夹内除了xxxx.md文件还有一个<strong>同名的文件夹</strong></p><p>例如：</p><p><img src="/2021/04/20/%E5%A6%82%E4%BD%95%E7%94%A8hexo%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/3.png"></p><p>③：如果想引用一张图片，就把想引用的图片存到xxxx.md对应的xxxx文件夹中，在xxxx.md文件中，只需输入</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-type">![</span><span class="hljs-string">你想输入的替代文字](图片的对应位置)</span><br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-type">![](</span><span class="hljs-string">如何用hexo上传一篇文章/3.png)</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong>是括号里是相对路径<code>如何用hexo上传一篇文章/3.png</code>，不是绝对路径<code>D:\Hexo\source\_posts\如何用hexo上传一篇文章\3.png</code></p><p>结束语：有什么不对的地方还请多多指教，互相学习hh。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tensorflow垃圾分类</title>
    <link href="/2021/04/16/tensorflow%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/"/>
    <url>/2021/04/16/tensorflow%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>版本:</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">python <span class="hljs-number">3.7</span><span class="hljs-number">.9</span><br>django <span class="hljs-number">2.2</span><br>efficientnet <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br>flask <span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br>h5py <span class="hljs-number">2.10</span><span class="hljs-number">.0</span><br>keras <span class="hljs-number">2.3</span><span class="hljs-number">.1</span><br>pillow <span class="hljs-number">8.1</span><span class="hljs-number">.0</span><br>numpy <span class="hljs-number">1.20</span><span class="hljs-number">.1</span><br>tensorflow-gpu <span class="hljs-number">2.0</span><span class="hljs-number">.0</span><br>mysql <span class="hljs-number">8.0</span><span class="hljs-number">.23</span><br>mysqlclient <span class="hljs-number">1.3</span><span class="hljs-number">.14</span><br></code></pre></div></td></tr></table></figure><p> <strong>软件：</strong> anaconda3 + Pycharm ，由anaconda3创建虚拟环境，并在Pycharm上对接</p><p><strong>conda源：</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#清华源：</span><br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge <br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><br><span class="hljs-comment">#中科大源：</span><br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/<br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><br><span class="hljs-comment">#删除源：</span><br>conda config --remove-key channels<br></code></pre></div></td></tr></table></figure><p>本次实验由于数据集较少，所以采用了图像增强的方法，对数据进行了增强</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix"><span class="hljs-attr">train_datagen</span> = ImageDataGenerator(<br>    <span class="hljs-attr">rescale=1/255,</span> <span class="hljs-comment"># 使图片的值归一化到(0,1)之间</span><br>    <span class="hljs-attr">rotation_range=40,</span> <span class="hljs-comment"># 对图像的随机旋转</span><br>    <span class="hljs-attr">height_shift_range=0.2,</span> <span class="hljs-comment"># 上下移动</span><br>    <span class="hljs-attr">width_shift_range=0.2,</span> <span class="hljs-comment"># 水平移动</span><br>    <span class="hljs-attr">shear_range=0.2,</span> <span class="hljs-comment"># 剪切强度（逆时针方向的剪切变换角度）</span><br>    <span class="hljs-attr">zoom_range=0.2,</span> <span class="hljs-comment"># 随机缩放的幅度</span><br>    <span class="hljs-attr">horizontal_flip=True,</span> <span class="hljs-comment"># 进行随机水平翻转</span><br>    <span class="hljs-attr">vertical_flip=True,</span> <span class="hljs-comment"># 进行随机竖直翻转</span><br>    <span class="hljs-comment"># 由于未人工进行训练集和验证机的比例分割，所以采用ImageDataGenerator自带的validation_split进行分割</span><br>    <span class="hljs-attr">validation_split=0.1</span> <span class="hljs-comment"># 保留用于验证的图像的比例（严格在0和1之间）</span><br>)<br></code></pre></div></td></tr></table></figure><p>共尝试三个模型：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">model = Sequential([<br>    Conv2D(filters=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>, input_shape=(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">3</span>)),<br>    MaxPooling2D(pool_size=<span class="hljs-number">2</span>),<br><br>    Conv2D(filters=<span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    MaxPooling2D(pool_size=<span class="hljs-number">2</span>),<br><br>    Conv2D(filters=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    MaxPooling2D(pool_size=<span class="hljs-number">2</span>),<br><br>    Conv2D(filters=<span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    MaxPooling2D(pool_size=<span class="hljs-number">2</span>),<br><br>    Flatten(),<br><br>    Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br><br>    Dense(<span class="hljs-number">6</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br><br>model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>,<br>              optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;acc&#x27;</span>])<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">model = Sequential()<br>model.add(Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), input_shape=(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>model.add(MaxPooling2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><br>model.add(Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>model.add(MaxPooling2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><br>model.add(Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>model.add(MaxPooling2D(pool_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br><br>model.add(Flatten())<br>model.add(Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>model.add(Dropout(<span class="hljs-number">0.5</span>))<br>model.add(Dense(<span class="hljs-number">6</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><br>model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>,<br>              optimizer=<span class="hljs-string">&#x27;rmsprop&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;acc&#x27;</span>])<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#切换使用keras和tensorflow.keras</span><br><span class="hljs-keyword">from</span> tensorflow.keras.preprocessing.image <span class="hljs-keyword">import</span> ImageDataGenerator<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Flatten, Dense, Dropout<br><span class="hljs-keyword">from</span> tensorflow.keras.models <span class="hljs-keyword">import</span> Sequential<br><span class="hljs-comment">#切换使用efficientnet.tfkeras和efficientnet.keras</span><br><span class="hljs-keyword">import</span> efficientnet.tfkeras <span class="hljs-keyword">as</span> efn<br><br>covn_base = efn.EfficientNetB0(weights=<span class="hljs-string">&#x27;imagenet&#x27;</span>,<br>                               input_shape=(<span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">3</span>),<br>                               include_top=<span class="hljs-literal">False</span>,<br>                               pooling=<span class="hljs-string">&#x27;avg&#x27;</span>)<br>model = Sequential()<br>model.add(covn_base)<br>model.add(Dropout(<span class="hljs-number">0.2</span>))<br>model.add(Dense(<span class="hljs-number">1024</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>model.add(Dropout(<span class="hljs-number">0.2</span>))<br>model.add(Dense(<span class="hljs-number">512</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>model.add(Dropout(<span class="hljs-number">0.5</span>))<br>model.add(Dense(<span class="hljs-number">6</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br><br>covn_base.trainable = <span class="hljs-literal">False</span><br><br>model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>,<br>              optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;acc&#x27;</span>])<br></code></pre></div></td></tr></table></figure><h6 id="以上三个模型中，第三个模型的效果最优"><a href="#以上三个模型中，第三个模型的效果最优" class="headerlink" title="以上三个模型中，第三个模型的效果最优"></a>以上三个模型中，第三个模型的效果最优</h6><p>一，二模型是在keras上进行的，而第三个模型是在tensorflow.keras下进行的。</p><p>原因是第三个模型采用了EfficientNet是谷歌2019最新的net： EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks ICML 2019。正好我当前采用的tensorflow版本为2.0, tensorflow2.x版本自带了keras，相比较单独使用keras，用tensorflow.keras似乎是种更好的选择，但在EfficientNetB0的问题上，采用efficientnet.tfkeras得到的效果要远比efficientnet.keras好，具体原因暂未知道，可能是前段代码采用的是keras的，而后段代码是tensorflow.keras所导致的</p><p><strong>关于安装：</strong></p><p>本次安装在经过很多乱七八糟的问题之后，得到了一个相对来说稳定且妥当的方法</p><p>采用的是anaconda和Pycharm结合。</p><p>为防止项目进展过程中的各第三方库版本不适配问题，必须先用anaconda创建一个<strong>新的虚拟环境</strong>，然后上网查找源并对anaconda进行<strong>换源</strong>，最终在activate虚拟环境内，<strong>进行conda install安装各第三方库</strong>即可，值得高兴的是，使用conda install tensorflow-gpu==2.0时，conda将自动安装与其tensorflow-gpu版本相对应的CUDA和cudnn，节省了很多时间。<strong>需要注意</strong>，Pycharm无法自动与我们创建的虚拟环境对接，需要手动对Pycharm进行虚拟环境对接。</p><p><strong>关于预测部分的部分代码：</strong></p><p>需要注意，加载训练好的模型可能会出现如下问题：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ValueError: Unknown activation function:swish<br></code></pre></div></td></tr></table></figure><p>原因是由于我们采用的是第三种模型，而第三个模型调用的是</p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> efficientnet.tfkeras <span class="hljs-keyword">as</span> efn<br></code></pre></div></td></tr></table></figure><p>所以在predict.py下，我们也应该添加上面这段代码，添加之后问题解决</p><p><strong>以下是三个模型的预测结果：</strong></p><h4 id="模型1"><a href="#模型1" class="headerlink" title="模型1"></a>模型1</h4><p><img src="/2021/04/16/tensorflow%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/acc1.jpg"></p><h4 id="模型2"><a href="#模型2" class="headerlink" title="模型2"></a>模型2</h4><p><img src="/2021/04/16/tensorflow%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/acc2.jpg"></p><h4 id="模型3"><a href="#模型3" class="headerlink" title="模型3"></a>模型3</h4><p><img src="/2021/04/16/tensorflow%E5%9E%83%E5%9C%BE%E5%88%86%E7%B1%BB/acc3.jpg"></p><p>第三个模型的效果远高于第一二个模型，之后时间允许的话，可以再微调参使其效果更佳。</p><p><strong>后续计划：</strong></p><p>进行图像定位和语义分割，以及在flask或django框架下部署tensorflow。</p><p><strong>django操作日志：</strong></p><p>目前暂时采用django2.2结合MySQL8.0.23来部署了tensorflow.keras，已经可以实现由网页端上传图片，后端接收图片，并通过加载训练好的模型来对接收到的图片进行分类，并将分类结果返回给前端。</p><p>要注意执行在 终端Terminal 执行 python manage.py runserver 时，首先需要activate ke2 来激活虚拟环境ke2，以确保使用的是我们构建的虚拟环境中的django</p><p>点击上方地址即可跳转到创建好的form表单</p><p>选择文件并点击提交</p><p>点击提交后即可跳转到预测结果的html文件，在前端显示预测结果</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ctrl + c即可退出django<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tensorflow</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
